
@inproceedings{bolin2005,
	location = {Seattle, {WA}, {USA}},
	title = {Automation and customization of rendered web pages},
	isbn = {978-1-59593-271-6},
	url = {http://portal.acm.org/citation.cfm?doid=1095034.1095062},
	doi = {10.1145/1095034.1095062},
	abstract = {On the desktop, an application can expect to control its user interface down to the last pixel, but on the World Wide Web, a content provider has no control over how the client will view the page, once delivered to the browser. This creates an opportunity for end-users who want to automate and customize their web experiences, but the growing complexity of web pages and standards prevents most users from realizing this opportunity. We describe Chickenfoot, a programming system embedded in the Firefox web browser, which enables end-users to automate, customize, and integrate web applications without examining their source code. One way Chickenfoot addresses this goal is a novel technique for identifying page components by keyword pattern matching. We motivate this technique by studying how users name web page components, and present a heuristic keyword matching algorithm that identifies the desired component from the user’s name.},
	eventtitle = {the 18th annual {ACM} symposium},
	pages = {163},
	booktitle = {Proceedings of the 18th annual {ACM} symposium on User interface software and technology  - {UIST} '05},
	publisher = {{ACM} Press},
	author = {Bolin, Michael and Webber, Matthew and Rha, Philip and Wilson, Tom and Miller, Robert C.},
	urldate = {2019-12-27},
	date = {2005},
	langid = {english},
	keywords = {Wildcard},
	file = {Bolin et al. - 2005 - Automation and customization of rendered web pages.pdf:/Users/geoffreylitt/Zotero/storage/JS89G2G2/Bolin et al. - 2005 - Automation and customization of rendered web pages.pdf:application/pdf}
}

@book{disessa2000,
	location = {Cambridge, {MA}, {USA}},
	title = {Changing Minds: Computers, Learning, and Literacy},
	shorttitle = {Changing Minds},
	publisher = {{MIT} Press},
	author = {{diSessa}, Andrea A.},
	date = {2000}
}

@inproceedings{leshed2008,
	location = {New York, {NY}, {USA}},
	title = {{CoScripter}: Automating \& Sharing How-to Knowledge in the Enterprise},
	isbn = {978-1-60558-011-1},
	url = {http://doi.acm.org/10.1145/1357054.1357323},
	doi = {10.1145/1357054.1357323},
	series = {{CHI} '08},
	shorttitle = {{CoScripter}},
	abstract = {Modern enterprises are replete with numerous online processes. Many must be performed frequently and are tedious, while others are done less frequently yet are complex or hard to remember. We present interviews with knowledge workers that reveal a need for mechanisms to automate the execution of and to share knowledge about these processes. In response, we have developed the {CoScripter} system (formerly Koala [11]), a collaborative scripting environment for recording, automating, and sharing web-based processes. We have deployed {CoScripter} within a large corporation for more than 10 months. Through usage log analysis and interviews with users, we show that {CoScripter} has addressed many user automation and sharing needs, to the extent that more than 50 employees have voluntarily incorporated it into their work practice. We also present ways people have used {CoScripter} and general issues for tools that support automation and sharing of how-to knowledge.},
	pages = {1719--1728},
	booktitle = {Proceedings of the {SIGCHI} Conference on Human Factors in Computing Systems},
	publisher = {{ACM}},
	author = {Leshed, Gilly and Haber, Eben M. and Matthews, Tara and Lau, Tessa},
	urldate = {2019-12-28},
	date = {2008},
	note = {event-place: Florence, Italy},
	keywords = {automation, knowledge sharing, procedural knowledge, programming-by-demonstration, scripting, user study, wiki},
	file = {ACM Full Text PDF:/Users/geoffreylitt/Zotero/storage/RHE55DIG/Leshed et al. - 2008 - CoScripter Automating & Sharing How-to Knowledge .pdf:application/pdf}
}

@online{talwar2019,
	title = {gmail.js},
	url = {https://github.com/KartikTalwar/gmail.js},
	abstract = {Gmail {JavaScript} {API}},
	titleaddon = {{GitHub}},
	author = {Talwar, Kartik},
	urldate = {2019-12-28},
	date = {2019},
	langid = {english},
	file = {Snapshot:/Users/geoffreylitt/Zotero/storage/EQIGCWJM/master.html:text/html}
}

@online{streak,
	title = {{InboxSDK}},
	url = {https://www.inboxsdk.com/},
	author = {Streak},
	urldate = {2019-12-28},
	file = {InboxSDK:/Users/geoffreylitt/Zotero/storage/TK2FCLM5/www.inboxsdk.com.html:text/html}
}

@online{2019,
	title = {End-user programming},
	url = {https://www.inkandswitch.com/end-user-programming.html},
	abstract = {A vision for empowered computing that reaches back forty years. Our research lab examines why it has been so hard to achieve.},
	titleaddon = {Ink and Switch},
	urldate = {2019-12-28},
	date = {2019-03},
	langid = {american},
	file = {Snapshot:/Users/geoffreylitt/Zotero/storage/VN9ZZWVZ/end-user-programming.html:text/html}
}

@inproceedings{beaudouin-lafon2000,
	location = {New York, {NY}, {USA}},
	title = {Reification, Polymorphism and Reuse: Three Principles for Designing Visual Interfaces},
	isbn = {978-1-58113-252-6},
	url = {http://doi.acm.org/10.1145/345513.345267},
	doi = {10.1145/345513.345267},
	series = {{AVI} '00},
	shorttitle = {Reification, Polymorphism and Reuse},
	abstract = {This paper presents three design principles to support the development of large-scale applications and take advantage of recent research in new interaction techniques: Reification turns concepts into first class objects, polymorphism permits commands to be applied to objects of different types, and reuse makes both user input and system output accessible for later use. We show that the power of these principles lies in their combination. Reification creates new objects that can be acted upon by a small set of polymorphic commands, creating more opportunities for reuse. The result is a simpler yet more powerful interface.
To validate these principles, we describe their application in the redesign of a complex interface for editing and simulating Coloured Petri Nets. The cpn2000 interface integrates floating palettes, toolglasses and marking menus in a consistent manner with a new metaphor for managing the workspace. It challenges traditional ideas about user interfaces, getting rid of pull-down menus, scrollbars, and even selection, while providing the same or greater functionality. Preliminary tests with users show that they find the new system both easier to use and more efficient.},
	pages = {102--109},
	booktitle = {Proceedings of the Working Conference on Advanced Visual Interfaces},
	publisher = {{ACM}},
	author = {Beaudouin-Lafon, Michel and Mackay, Wendy E.},
	urldate = {2019-12-28},
	date = {2000},
	note = {event-place: Palermo, Italy},
	keywords = {design principles, direct manipulation, instrumental interaction, interaction model, polymorphism, reification, reuse},
	file = {ACM Full Text PDF:/Users/geoffreylitt/Zotero/storage/ZUTWDQ9X/Beaudouin-Lafon and Mackay - 2000 - Reification, Polymorphism and Reuse Three Princip.pdf:application/pdf}
}

@online{berners-lee2018,
	title = {One Small Step for the Web…},
	url = {https://medium.com/@timberners_lee/one-small-step-for-the-web-87f92217d085},
	abstract = {I’ve always believed the web is for everyone. That’s why I and others fight fiercely to protect it. The changes we’ve managed to bring have…},
	titleaddon = {Medium},
	author = {Berners-Lee, Tim},
	urldate = {2019-12-28},
	date = {2018-09-29},
	langid = {english},
	file = {Snapshot:/Users/geoffreylitt/Zotero/storage/MSSQR3BL/one-small-step-for-the-web-87f92217d085.html:text/html}
}

@inproceedings{klokmose2015,
	location = {Daegu, Kyungpook, Republic of Korea},
	title = {Webstrates: Shareable Dynamic Media},
	isbn = {978-1-4503-3779-3},
	url = {http://dl.acm.org/citation.cfm?doid=2807442.2807446},
	doi = {10.1145/2807442.2807446},
	shorttitle = {Webstrates},
	abstract = {We revisit Alan Kay’s early vision of dynamic media that blurs the distinction between documents and applications. We introduce shareable dynamic media that are malleable by users, who may appropriate them in idiosyncratic ways; shareable among users, who collaborate on multiple aspects of the media; and distributable across diverse devices and platforms. We present Webstrates, an environment for exploring shareable dynamic media. Webstrates augment web technology with real-time sharing. They turn web pages into substrates, i.e. software entities that act as applications or documents depending upon use. We illustrate Webstrates with two implemented case studies: users collaboratively author an article with functionally and visually different editors that they can personalize and extend at run-time; and they orchestrate its presentation and audience participation with multiple devices. We demonstrate the simplicity and generative power of Webstrates with three additional prototypes and evaluate it from a systems perspective.},
	eventtitle = {the 28th Annual {ACM} Symposium},
	pages = {280--290},
	booktitle = {Proceedings of the 28th Annual {ACM} Symposium on User Interface Software \& Technology - {UIST} '15},
	publisher = {{ACM} Press},
	author = {Klokmose, Clemens N. and Eagan, James R. and Baader, Siemen and Mackay, Wendy and Beaudouin-Lafon, Michel},
	urldate = {2019-12-29},
	date = {2015},
	langid = {english},
	file = {Klokmose et al. - 2015 - iWebstratesi Shareable Dynamic Media.pdf:/Users/geoffreylitt/Zotero/storage/PZI6XAMQ/Klokmose et al. - 2015 - iWebstratesi Shareable Dynamic Media.pdf:application/pdf}
}

@article{kay1977,
	title = {Personal Dynamic Media},
	volume = {10},
	issn = {1558-0814},
	doi = {10.1109/C-M.1977.217672},
	abstract = {The Learning Research Group at Xerox Palo Alto Research Center is concerned with all aspects of the communication and manipulation of knowledge. We design, build, and use dynamic media which can be used by human beings of all ages. Several years ago, we crystallized our dreams into a design idea for a personal dynamic medium the size of a notebook (the Dynabook) which could be owned by everyone and could have the power to handle virtually all of its owner's information-related needs. Towards this goal we have designed and built a communications system: the Smalltalk language, implemented on small computers we refer to as "interim Dynabooks." We are exploring the use of this system as a programming and problem solving tool; as an interactive memory for the storage and manipulation of data; as a text editor; and as a medium for expression through drawing, painting, animating pictures, and composing and generating music. (Figure 1 is a view of this interim Dynabook.)},
	pages = {31--41},
	number = {3},
	journaltitle = {Computer},
	author = {Kay, A. and Goldberg, A.},
	date = {1977-03},
	keywords = {Animation, Computational modeling, Crystallization, Embedded computing, Information retrieval, Manipulator dynamics, Problem-solving},
	file = {IEEE Xplore Full Text PDF:/Users/geoffreylitt/Zotero/storage/Q3SGCHYI/Kay and Goldberg - 1977 - Personal Dynamic Media.pdf:application/pdf;IEEE Xplore Abstract Record:/Users/geoffreylitt/Zotero/storage/8Q36BUGB/1646405.html:text/html}
}

@article{chang2019,
	title = {Dependent type systems as macros},
	volume = {4},
	issn = {24751421},
	url = {http://dl.acm.org/citation.cfm?doid=3377388.3371071},
	doi = {10.1145/3371071},
	pages = {1--29},
	issue = {{POPL}},
	journaltitle = {Proceedings of the {ACM} on Programming Languages},
	shortjournal = {Proc. {ACM} Program. Lang.},
	author = {Chang, Stephen and Ballantyne, Michael and Turner, Milo and Bowman, William J.},
	urldate = {2019-12-29},
	date = {2019-12-20},
	langid = {english},
	keywords = {toread},
	file = {Chang et al. - 2019 - Dependent type systems as macros.pdf:/Users/geoffreylitt/Zotero/storage/DL7ZUBWU/Chang et al. - 2019 - Dependent type systems as macros.pdf:application/pdf}
}

@article{lew2019,
	title = {Trace types and denotational semantics for sound programmable inference in probabilistic languages},
	volume = {4},
	issn = {24751421},
	url = {http://dl.acm.org/citation.cfm?doid=3377388.3371087},
	doi = {10.1145/3371087},
	abstract = {{ALEXANDER} K. {LEW}, Massachusetts Institute of Technology, {USA} {MARCO} F. {CUSUMANO}-{TOWNER}, Massachusetts Institute of Technology, {USA} {BENJAMIN} {SHERMAN}, Massachusetts Institute of Technology, {USA} {MICHAEL} {CARBIN}, Massachusetts Institute of Technology, {USA} {VIKASH} K. {MANSINGHKA}, Massachusetts Institute of Technology, {USA} Modern probabilistic programming languages aim to formalize and automate key aspects of probabilistic modeling and inference. Many languages provide constructs for programmable inference that enable developers 19 to improve inference speed and accuracy by tailoring an algorithm for use with a particular model or dataset. Unfortunately, it is easy to use these constructs to write unsound programs that appear to run correctly but produce incorrect results. To address this problem, we present a denotational semantics for programmable inference in higher-order probabilistic programming languages, along with a type system that ensures that well-typed inference programs are sound by construction. A central insight is that the type of a probabilistic expression can track the space of its possible execution traces, not just the type of value that it returns, as these traces are often the objects that inference algorithms manipulate. We use our semantics and type system to establish soundness properties of custom inference programs that use constructs for variational, sequential Monte Carlo, importance sampling, and Markov chain Monte Carlo inference. {CCS} Concepts: · Mathematics of computing → Probabilistic inference problems; Variational methods; Metropolis-Hastings algorithm; Sequential Monte Carlo methods; · Theory of computation → Semantics and reasoning; Denotational semantics; · Software and its engineering → Formal language definitions.},
	pages = {1--32},
	issue = {{POPL}},
	journaltitle = {Proceedings of the {ACM} on Programming Languages},
	shortjournal = {Proc. {ACM} Program. Lang.},
	author = {Lew, Alexander K. and Cusumano-Towner, Marco F. and Sherman, Benjamin and Carbin, Michael and Mansinghka, Vikash K.},
	urldate = {2019-12-29},
	date = {2019-12-20},
	langid = {english},
	keywords = {toread},
	file = {Lew et al. - 2019 - Trace types and denotational semantics for sound p.pdf:/Users/geoffreylitt/Zotero/storage/RTHTYZ7Y/Lew et al. - 2019 - Trace types and denotational semantics for sound p.pdf:application/pdf}
}

@article{wang2019,
	title = {Visualization by example},
	volume = {4},
	issn = {24751421},
	url = {http://dl.acm.org/citation.cfm?doid=3377388.3371117},
	doi = {10.1145/3371117},
	abstract = {{CHENGLONG} {WANG}, University of Washington, {USA} {YU} {FENG}, University of California, Santa Barbara, {USA} {RASTISLAV} {BODIK}, University of Washington, {USA} {ALVIN} {CHEUNG}, University of California, Berkeley, {USA} {ISIL} {DILLIG}, University of Texas at Austin, {USA} While visualizations play a crucial role in gaining insights from data, generating useful visualizations from a complex dataset is far from an easy task. In particular, besides understanding the functionality provided by existing visualization libraries, generating the desired visualization also requires reshaping and aggregating the underlying data as well as composing different visual elements to achieve the intended visual narrative. This paper aims to simplify visualization tasks by automatically synthesizing the required program from simple visual sketches provided by the user. Specifically, given an input data set and a visual sketch that demonstrates how to visualize a very small subset of this data, our technique automatically generates a program that can be used to visualize the entire data set. From a program synthesis perspective, automating visualization tasks poses several challenges that are not addressed by prior techniques. First, because many visualization tasks require data wrangling in addition to generating plots from a given table, we need to decompose the end-to-end synthesis task into two separate sub-problems. Second, because the intermediate specification that results from the decomposition is necessarily imprecise, this makes the data wrangling task particularly challenging in our context. In this paper, we address these problems by developing a new compositional visualization-by-example technique that (a) decomposes the end-to-end task into two different synthesis problems over different {DSLs} and (b) leverages bi-directional program analysis to deal with the complexity that arises from having an imprecise intermediate specification. We have implemented our visualization-by-example approach in a tool called Viser and evaluate it on 83 visualization tasks collected from on-line forums and tutorials. Viser can solve 84\% of these benchmarks within a 600 second time limit, and, for those tasks that can be solved, the desired visualization is among the top-5 generated by Viser in 70\% of the cases. {CCS} Concepts: • Theory of computation → Program reasoning; • Human-centered computing → Visualization toolkits.},
	pages = {1--28},
	issue = {{POPL}},
	journaltitle = {Proceedings of the {ACM} on Programming Languages},
	shortjournal = {Proc. {ACM} Program. Lang.},
	author = {Wang, Chenglong and Feng, Yu and Bodik, Rastislav and Cheung, Alvin and Dillig, Isil},
	urldate = {2019-12-29},
	date = {2019-12-20},
	langid = {english},
	keywords = {toread},
	file = {Wang et al. - 2019 - Visualization by example.pdf:/Users/geoffreylitt/Zotero/storage/2RWUSYKS/Wang et al. - 2019 - Visualization by example.pdf:application/pdf}
}

@article{ohearn2019,
	title = {Incorrectness logic},
	volume = {4},
	issn = {24751421},
	url = {http://dl.acm.org/citation.cfm?doid=3377388.3371078},
	doi = {10.1145/3371078},
	abstract = {{PETER} W. O’{HEARN}, Facebook and University College London, {UK} 10 Program correctness and incorrectness are two sides of the same coin. As a programmer, even if you would like to have correctness, you might find yourself spending most of your time reasoning about incorrectness. This includes informal reasoning that people do while looking at or thinking about their code, as well as that supported by automated testing and static analysis tools. This paper describes a simple logic for program incorrectness which is, in a sense, the other side of the coin to Hoare’s logic of correctness. {CCS} Concepts: · Theory of computation → Programming logic.},
	pages = {1--32},
	issue = {{POPL}},
	journaltitle = {Proceedings of the {ACM} on Programming Languages},
	shortjournal = {Proc. {ACM} Program. Lang.},
	author = {O'Hearn, Peter W.},
	urldate = {2019-12-29},
	date = {2019-12-20},
	langid = {english},
	keywords = {toread},
	file = {O'Hearn - 2019 - Incorrectness logic.pdf:/Users/geoffreylitt/Zotero/storage/TDY592AI/O'Hearn - 2019 - Incorrectness logic.pdf:application/pdf}
}

@inproceedings{mayer2015,
	location = {Daegu, Kyungpook, Republic of Korea},
	title = {User Interaction Models for Disambiguation in Programming by Example},
	isbn = {978-1-4503-3779-3},
	url = {http://dl.acm.org/citation.cfm?doid=2807442.2807459},
	doi = {10.1145/2807442.2807459},
	abstract = {Programming by Examples ({PBE}) has the potential to revo­ lutionize end-user programming by enabling end users, most of whom are non-programmers, to create small scripts for au­ tomating repetitive tasks. However, examples, though often easy to provide, are an ambiguous speciﬁcation of the user’s intent. Because of that, a key impedance in adoption of {PBE} systems is the lack of user conﬁdence in the correctness of the program that was synthesized by the system. We present two novel user interaction models that communicate action­ able information to the user to help resolve ambiguity in the examples. One of these models allows the user to effectively navigate between the huge set of programs that are consis­ tent with the examples provided by the user. The other model uses active learning to ask directed example-based questions to the user on the test input data over which the user intends to run the synthesized program. Our user studies show that each of these models signiﬁcantly reduces the number of errors in the performed task without any difference in completion time. Moreover, both models are perceived as useful, and the proactive active-learning based model has a slightly higher preference regarding the users’ conﬁdence in the result.},
	eventtitle = {the 28th Annual {ACM} Symposium},
	pages = {291--301},
	booktitle = {Proceedings of the 28th Annual {ACM} Symposium on User Interface Software \& Technology - {UIST} '15},
	publisher = {{ACM} Press},
	author = {Mayer, Mikaël and Soares, Gustavo and Grechkin, Maxim and Le, Vu and Marron, Mark and Polozov, Oleksandr and Singh, Rishabh and Zorn, Benjamin and Gulwani, Sumit},
	urldate = {2020-01-03},
	date = {2015},
	langid = {english},
	file = {Mayer et al. - 2015 - User Interaction Models for Disambiguation in Prog.pdf:/Users/geoffreylitt/Zotero/storage/GWGSLACW/Mayer et al. - 2015 - User Interaction Models for Disambiguation in Prog.pdf:application/pdf}
}

@article{huynh,
	title = {Potluck: Data Mash-Up Tool for Casual Users},
	abstract = {As more and more reusable structured data appears on the Web, casual users will want to take into their own hands the task of mashing up data rather than wait for mash-up sites to be built that address exactly their individually unique needs. In this paper, we present Potluck, a Web user interface that lets casual users­—those without programming skills and data modeling expertise—mash up data themselves.},
	pages = {14},
	author = {Huynh, David F and Miller, Robert C and Karger, David R},
	langid = {english},
	file = {Huynh et al. - Potluck Data Mash-Up Tool for Casual Users.pdf:/Users/geoffreylitt/Zotero/storage/8NYBXRL6/Huynh et al. - Potluck Data Mash-Up Tool for Casual Users.pdf:application/pdf}
}

@online{zotero-48,
	title = {Exhibit {\textbar} Proceedings of the 16th international conference on World Wide Web},
	url = {http://dl.acm.org/doi/abs/10.1145/1242572.1242672},
	urldate = {2020-01-03},
	langid = {english},
	file = {Snapshot:/Users/geoffreylitt/Zotero/storage/6KKT6UT4/1242572.html:text/html}
}

@inproceedings{huynh2007,
	location = {Banff, Alberta, Canada},
	title = {Exhibit: lightweight structured data publishing},
	isbn = {978-1-59593-654-7},
	url = {http://portal.acm.org/citation.cfm?doid=1242572.1242672},
	doi = {10.1145/1242572.1242672},
	shorttitle = {Exhibit},
	abstract = {The early Web was hailed for giving individuals the same publishing power as large content providers. But over time, large content providers learned to exploit the structure in their data, leveraging databases and server side technologies to provide rich browsing and visualization. Individual authors fall behind once more: neither old-fashioned static pages nor domain-speciﬁc publishing frameworks supporting limited customization can match custom database-backed web applications.},
	eventtitle = {the 16th international conference},
	pages = {737},
	booktitle = {Proceedings of the 16th international conference on World Wide Web  - {WWW} '07},
	publisher = {{ACM} Press},
	author = {Huynh, David F. and Karger, David R. and Miller, Robert C.},
	urldate = {2020-01-03},
	date = {2007},
	langid = {english},
	file = {Huynh et al. - 2007 - Exhibit lightweight structured data publishing.pdf:/Users/geoffreylitt/Zotero/storage/KDFB58RI/Huynh et al. - 2007 - Exhibit lightweight structured data publishing.pdf:application/pdf}
}

@inproceedings{huynh2006,
	location = {Montreux, Switzerland},
	title = {Enabling web browsers to augment web sites' filtering and sorting functionalities},
	isbn = {978-1-59593-313-3},
	url = {http://dl.acm.org/citation.cfm?doid=1166253.1166274},
	doi = {10.1145/1166253.1166274},
	abstract = {Existing augmentations of web pages are mostly small cosmetic changes (e.g., removing ads) and minor addition of third-party content (e.g., product prices from competing sites). None leverages the structured data presented in web pages. This paper describes Sifter, a web browser extension that can augment a well-structured web site with advanced ﬁltering and sorting functionality. These added features work inside the site’s own pages, preserving the site’s presentational style and the user’s context. Sifter contains an algorithm that scrapes structured data out of well-structured web pages while usually requiring no user intervention. We tested Sifter on real web sites and real users and found that people could use Sifter to perform sophisticated queries and high-level analyses on sizable data collections on the Web. We propose that web sites can be similarly augmented with other sophisticated data-centric functionality, giving users new beneﬁts over the existing Web.},
	eventtitle = {the 19th annual {ACM} symposium},
	pages = {125},
	booktitle = {Proceedings of the 19th annual {ACM} symposium on User interface software and technology - {UIST} '06},
	publisher = {{ACM} Press},
	author = {Huynh, David F. and Miller, Robert C. and Karger, David R.},
	urldate = {2020-01-03},
	date = {2006},
	langid = {english},
	file = {Huynh et al. - 2006 - Enabling web browsers to augment web sites' filter.pdf:/Users/geoffreylitt/Zotero/storage/8WA9RXE3/Huynh et al. - 2006 - Enabling web browsers to augment web sites' filter.pdf:application/pdf}
}

@inproceedings{wong2007,
	location = {San Jose, California, {USA}},
	title = {Making mashups with marmite: towards end-user programming for the web},
	isbn = {978-1-59593-593-9},
	url = {http://dl.acm.org/citation.cfm?doid=1240624.1240842},
	doi = {10.1145/1240624.1240842},
	shorttitle = {Making mashups with marmite},
	abstract = {There is a tremendous amount of web content available today, but it is not always in a form that supports end-users’ needs. In many cases, all of the data and services needed to accomplish a goal already exist, but are not in a form amenable to an end-user. To address this problem, we have developed an end-user programming tool called Marmite, which lets end-users create so-called mashups that repurpose and combine existing web content and services. In this paper, we present the design, implementation, and evaluation of Marmite. An informal user study found that programmers and some spreadsheet users had little difficulty using the system.},
	eventtitle = {the {SIGCHI} Conference},
	pages = {1435--1444},
	booktitle = {Proceedings of the {SIGCHI} Conference on Human Factors in Computing Systems  - {CHI} '07},
	publisher = {{ACM} Press},
	author = {Wong, Jeffrey and Hong, Jason I.},
	urldate = {2020-01-03},
	date = {2007},
	langid = {english},
	file = {Wong and Hong - 2007 - Making mashups with marmite towards end-user prog.pdf:/Users/geoffreylitt/Zotero/storage/9QWLY8KD/Wong and Hong - 2007 - Making mashups with marmite towards end-user prog.pdf:application/pdf}
}

@article{huynha,
	title = {Piggy Bank: Experience the Semantic Web Inside Your Web Browser},
	abstract = {The Semantic Web Initiative envisions a Web wherein information is offered free of presentation, allowing more effective exchange and mixing across web sites and across web pages. But without substantial Semantic Web content, few tools will be written to consume it; without many such tools, there is little appeal to publish Semantic Web content.},
	pages = {15},
	author = {Huynh, David and Mazzocchi, Stefano and Karger, David},
	langid = {english},
	file = {Huynh et al. - Piggy Bank Experience the Semantic Web Inside You.pdf:/Users/geoffreylitt/Zotero/storage/KN75YT2E/Huynh et al. - Piggy Bank Experience the Semantic Web Inside You.pdf:application/pdf}
}

@inproceedings{huynh2005,
	location = {Berlin, Heidelberg},
	title = {Piggy Bank: Experience the Semantic Web Inside Your Web Browser},
	isbn = {978-3-540-32082-1},
	doi = {10.1007/11574620_31},
	series = {Lecture Notes in Computer Science},
	shorttitle = {Piggy Bank},
	abstract = {The Semantic Web Initiative envisions a Web wherein information is offered free of presentation, allowing more effective exchange and mixing across web sites and across web pages. But without substantial Semantic Web content, few tools will be written to consume it; without many such tools, there is little appeal to publish Semantic Web content.To break this chicken-and-egg problem, thus enabling more flexible informa-tion access, we have created a web browser extension called Piggy Bankthat lets users make use of Semantic Web content within Web content as users browse the Web. Wherever Semantic Web content is not available, Piggy Bank can invoke screenscrapers to re-structure information within web pages into Semantic Web format. Through the use of Semantic Web technologies, Piggy Bank provides direct, immediate benefits to users in their use of the existing Web. Thus, the ex-istence of even just a few Semantic Web-enabled sites or a few scrapers already benefits users. Piggy Bank thereby offers an easy, incremental upgrade path to users without requiring a wholesale adoption of the Semantic Web’s vision.To further improve this Semantic Web experience, we have created Semantic Bank, a web server application that lets Piggy Bank users share the Semantic Web information they have collected, enabling collaborative efforts to build so-phisticated Semantic Web information repositories through simple, everyday’s use of Piggy Bank.},
	pages = {413--430},
	booktitle = {The Semantic Web – {ISWC} 2005},
	publisher = {Springer},
	author = {Huynh, David and Mazzocchi, Stefano and Karger, David},
	editor = {Gil, Yolanda and Motta, Enrico and Benjamins, V. Richard and Musen, Mark A.},
	date = {2005},
	langid = {english},
	keywords = {Common Data Model, Information Item, Resource Description Framework, Resource Description Framework Data, Temporary Database},
	file = {Springer Full Text PDF:/Users/geoffreylitt/Zotero/storage/T84CAZ7L/Huynh et al. - 2005 - Piggy Bank Experience the Semantic Web Inside You.pdf:application/pdf}
}

@inproceedings{hogue2005,
	location = {Chiba, Japan},
	title = {Thresher: automating the unwrapping of semantic content from the World Wide Web},
	isbn = {978-1-59593-046-0},
	url = {http://portal.acm.org/citation.cfm?doid=1060745.1060762},
	doi = {10.1145/1060745.1060762},
	shorttitle = {Thresher},
	abstract = {We describe Thresher, a system that lets non-technical users teach their browsers how to extract semantic web content from {HTML} documents on the World Wide Web. Users specify examples of semantic content by highlighting them in a web browser and describing their meaning. We then use the tree edit distance between the {DOM} subtrees of these examples to create a general pattern, or wrapper, for the content, and allow the user to bind {RDF} classes and predicates to the nodes of these wrappers. By overlaying matches to these patterns on standard documents inside the Haystack semantic web browser, we enable a rich semantic interaction with existing web pages, “unwrapping” semantic data buried in the pages’ {HTML}. By allowing end-users to create, modify, and utilize their own patterns, we hope to speed adoption and use of the Semantic Web and its applications.},
	eventtitle = {the 14th international conference},
	pages = {86},
	booktitle = {Proceedings of the 14th international conference on World Wide Web  - {WWW} '05},
	publisher = {{ACM} Press},
	author = {Hogue, Andrew and Karger, David},
	urldate = {2020-01-03},
	date = {2005},
	langid = {english},
	file = {Hogue and Karger - 2005 - Thresher automating the unwrapping of semantic co.pdf:/Users/geoffreylitt/Zotero/storage/SGZ4PK28/Hogue and Karger - 2005 - Thresher automating the unwrapping of semantic co.pdf:application/pdf}
}

@incollection{miller2010a,
	location = {Boston},
	title = {Chapter 3 - Rewriting the Web with Chickenfoot},
	isbn = {978-0-12-381541-5},
	url = {http://www.sciencedirect.com/science/article/pii/B9780123815415000031},
	abstract = {Unlike desktop applications, Web applications are much more exposed and open to modification. This chapter describes Chickenfoot, a programming system embedded in the Firefox Web browser, which enables end users to automate, customize, and integrate Web applications without examining their source code. One way Chickenfoot addresses this goal is a technique for identifying page components by keyword pattern matching. Web automation includes navigating pages, filling in forms, and clicking on links. For example, many conferences now use a Web site to receive papers, distribute them to reviewers, and collect the reviews. A reviewer assigned 10 papers must download each paper, print it, and (later) upload a review for it. Tedious repetition is a good argument for automation. While integrating multiple Web sites, the simplest kind of integration is just adding links from one site to another, but much richer integration is possible. Techniques are developed through studying how users name Web page components and present a heuristic keyword-matching algorithm that identifies the desired component from the user's name. It describes a range of applications that have been created using Chickenfoot and reflects on its advantages and limitations.},
	pages = {39--63},
	booktitle = {No Code Required},
	publisher = {Morgan Kaufmann},
	author = {Miller, Robert C. and Bolin, Michael and Chilton, Lydia B. and Little, Greg and Webber, Matthew and Yu, Chen-Hsiang},
	editor = {Cypher, Allen and Dontcheva, Mira and Lau, Tessa and Nichols, Jeffrey},
	urldate = {2020-01-03},
	date = {2010-01-01},
	langid = {english},
	doi = {10.1016/B978-0-12-381541-5.00003-1},
	file = {ScienceDirect Snapshot:/Users/geoffreylitt/Zotero/storage/I95VQQIL/B9780123815415000031.html:text/html;ScienceDirect Full Text PDF:/Users/geoffreylitt/Zotero/storage/ZZS3B7D7/Miller et al. - 2010 - Chapter 3 - Rewriting the Web with Chickenfoot.pdf:application/pdf}
}

@incollection{little2010,
	title = {Sloppy programming},
	isbn = {978-0-12-381541-5},
	url = {https://linkinghub.elsevier.com/retrieve/pii/B9780123815415000158},
	abstract = {Modern applications provide interfaces for scripting, but many users do not know how to write script commands. However, many users are familiar with the idea of entering keywords into a Web search engine. Hence, if a user is familiar with the vocabulary of an application domain, we anticipate that they could write a set of keywords expressing a command in that domain. For instance, in the Web browsing domain, a user might enter “click search button”. We call loosely grammatical commands of this sort “sloppy commands.” We discuss several prototypes that implement sloppy programming, translating sloppy commands directly into executable code. We also discuss the algorithms used in these prototypes, expose their limitations, and propose directions for future work.},
	pages = {289--307},
	booktitle = {No Code Required},
	publisher = {Elsevier},
	author = {Little, Greg and Miller, Robert C. and Chou, Victoria H. and Bernstein, Michael and Lau, Tessa and Cypher, Allen},
	urldate = {2020-01-03},
	date = {2010},
	langid = {english},
	doi = {10.1016/B978-0-12-381541-5.00015-8},
	file = {Little et al. - 2010 - Sloppy programming.pdf:/Users/geoffreylitt/Zotero/storage/GBFFTC6G/Little et al. - 2010 - Sloppy programming.pdf:application/pdf}
}

@article{disessa1986,
	title = {Boxer: a reconstructible computational medium},
	volume = {29},
	issn = {00010782},
	url = {http://portal.acm.org/citation.cfm?doid=6592.6595},
	doi = {10.1145/6592.6595},
	shorttitle = {Boxer},
	pages = {859--868},
	number = {9},
	journaltitle = {Communications of the {ACM}},
	shortjournal = {Commun. {ACM}},
	author = {{diSessa}, A. A and Abelson, H.},
	urldate = {2020-01-03},
	date = {1986-09-01},
	langid = {english},
	file = {diSessa and Abelson - 1986 - Boxer a reconstructible computational medium.pdf:/Users/geoffreylitt/Zotero/storage/EWBMP8Z2/diSessa and Abelson - 1986 - Boxer a reconstructible computational medium.pdf:application/pdf}
}

@inreference{hypercard2019,
	title = {{HyperCard}},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=HyperCard&oldid=931376685},
	abstract = {{HyperCard} is a software application and  development kit for Apple Macintosh and Apple {IIGS} computers. It is among the first successful hypermedia systems predating the World Wide Web.
{HyperCard} combines a flat-file database with a graphical, flexible, user-modifiable interface. {HyperCard} includes a built-in programming language called {HyperTalk} for manipulating data and the user interface.
This combination of features – a database with simple form layout, flexible support for graphics, and ease of programming – suits {HyperCard} for many different projects such as rapid application development of applications and databases, interactive applications with no database requirements, command and control systems, and many examples in the demoscene.
{HyperCard} was originally released in 1987 for \$49.95 and was included for free with all new Macs sold then. It was withdrawn from sale in March 2004, having received its final update in 1998 upon the return of Steve Jobs to Apple. {HyperCard} runs in the Classic Environment, but was not ported to Mac {OS} X.},
	booktitle = {Wikipedia},
	author = {Hypercard},
	urldate = {2020-01-03},
	date = {2019-12-18},
	langid = {english},
	note = {Page Version {ID}: 931376685},
	file = {Snapshot:/Users/geoffreylitt/Zotero/storage/XZV548R8/index.html:text/html}
}

@online{victor,
	title = {Dynamicland},
	url = {https://dynamicland.org/},
	abstract = {incubating a humane dynamic medium},
	author = {Victor, Bret},
	urldate = {2020-01-03},
	file = {Snapshot:/Users/geoffreylitt/Zotero/storage/JIP78YH7/dynamicland.org.html:text/html}
}

@inproceedings{verou2016,
	location = {Tokyo, Japan},
	title = {Mavo: Creating Interactive Data-Driven Web Applications by Authoring {HTML}},
	isbn = {978-1-4503-4189-9},
	url = {http://dl.acm.org/citation.cfm?doid=2984511.2984551},
	doi = {10.1145/2984511.2984551},
	shorttitle = {Mavo},
	abstract = {Many people can author static web pages with {HTML} and {CSS} but ﬁnd it hard or impossible to program persistent, interactive web applications. We show that for a broad class of {CRUD} (Create, Read, Update, Delete) applications, this gap can be bridged. Mavo extends the declarative syntax of {HTML} to describe Web applications that manage, store and transform data. Using Mavo, authors with basic {HTML} knowledge deﬁne complex data schemas implicitly as they design their {HTML} layout. They need only add a few attributes and expressions to their {HTML} elements to transform their static design into a persistent, data-driven web application whose data can be edited by direct manipulation of the content in the browser. We evaluated Mavo with 20 users who marked up static designs—some provided by us, some their own creation—to transform them into fully functional web applications. Even users with no programming experience were able to quickly craft Mavo applications.},
	eventtitle = {the 29th Annual Symposium},
	pages = {483--496},
	booktitle = {Proceedings of the 29th Annual Symposium on User Interface Software and Technology - {UIST} '16},
	publisher = {{ACM} Press},
	author = {Verou, Lea and Zhang, Amy X. and Karger, David R.},
	urldate = {2020-01-03},
	date = {2016},
	langid = {english},
	file = {Verou et al. - 2016 - Mavo Creating Interactive Data-Driven Web Applica.pdf:/Users/geoffreylitt/Zotero/storage/WDIPZUY3/Verou et al. - 2016 - Mavo Creating Interactive Data-Driven Web Applica.pdf:application/pdf}
}

@inproceedings{chang2014,
	location = {Honolulu, Hawaii, {USA}},
	title = {Creating interactive web data applications with spreadsheets},
	isbn = {978-1-4503-3069-5},
	url = {http://dl.acm.org/citation.cfm?doid=2642918.2647371},
	doi = {10.1145/2642918.2647371},
	abstract = {While more and more data are available through web services, it remains difficult for end-users to create web applications that make use of these data without having to write complex code. We present Gneiss, a live programming environment that extends the spreadsheet metaphor to support creating interactive web applications that dynamically use local and web data from multiple sources. Gneiss closely integrates a spreadsheet editor with a web interface builder to let users demonstrate bindings between properties of web {GUI} elements and cells in the spreadsheet while working with real web service data. The spreadsheet editor provides two-way connections to web services, to both visualize and retrieve different data based on the user input in the web interface. Gneiss achieves rich interactivity without the need for event-based programming by extending the “pull model” of formulas that is familiar to the spreadsheet users. We use a series of examples to demonstrate Gneiss’s ability to create a variety of interactive web data applications.},
	eventtitle = {the 27th annual {ACM} symposium},
	pages = {87--96},
	booktitle = {Proceedings of the 27th annual {ACM} symposium on User interface software and technology - {UIST} '14},
	publisher = {{ACM} Press},
	author = {Chang, Kerry Shih-Ping and Myers, Brad A.},
	urldate = {2020-01-03},
	date = {2014},
	langid = {english},
	file = {Chang and Myers - 2014 - Creating interactive web data applications with sp.pdf:/Users/geoffreylitt/Zotero/storage/VKRPDATE/Chang and Myers - 2014 - Creating interactive web data applications with sp.pdf:application/pdf}
}

@online{zotero-79,
	title = {Airtable: Organize anything you can imagine},
	url = {https://airtable.com},
	shorttitle = {Airtable},
	abstract = {Airtable works like a spreadsheet but gives you the power of a database to organize anything. Sign up for free.},
	titleaddon = {Airtable},
	urldate = {2020-01-03},
	file = {Snapshot:/Users/geoffreylitt/Zotero/storage/8UKHXPNG/airtable.com.html:text/html}
}

@online{zotero-81,
	title = {Create an App from a Google Sheet in Minutes · Glide},
	url = {https://www.glideapps.com/},
	abstract = {Glide turns spreadsheets into beautiful, easy-to-use apps, without code. Pick a spreadsheet or start with a template, customize your app, then share it instantly with anyone. Start today for free!},
	urldate = {2020-01-03},
	langid = {english},
	file = {Snapshot:/Users/geoffreylitt/Zotero/storage/YRRWLQM8/www.glideapps.com.html:text/html}
}

@inproceedings{benson2014,
	location = {Honolulu, Hawaii, {USA}},
	title = {Spreadsheet driven web applications},
	isbn = {978-1-4503-3069-5},
	url = {http://dl.acm.org/citation.cfm?doid=2642918.2647387},
	doi = {10.1145/2642918.2647387},
	abstract = {Creating and publishing read-write-compute web applications requires programming skills beyond what most end users possess. But many end users know how to make spreadsheets that act as simple information management applications, often with computation. We present a system for creating basic web applications using such spreadsheets in place of a server and using {HTML} to describe the client {UI}. Authors connect the two by placing spreadsheet references inside {HTML} attributes. Data computation is provided by spreadsheet formulas. The result is a reactive read-write-compute web page without a single line of Javascript code. Nearly all of the ﬁfteen {HTML} novices we studied were able to connect {HTML} to spreadsheets using our method with minimal instruction. We draw conclusions from their experience and discuss future extensions to this programming model.},
	eventtitle = {the 27th annual {ACM} symposium},
	pages = {97--106},
	booktitle = {Proceedings of the 27th annual {ACM} symposium on User interface software and technology - {UIST} '14},
	publisher = {{ACM} Press},
	author = {Benson, Edward and Zhang, Amy X. and Karger, David R.},
	urldate = {2020-01-03},
	date = {2014},
	langid = {english},
	file = {Benson et al. - 2014 - Spreadsheet driven web applications.pdf:/Users/geoffreylitt/Zotero/storage/GGLIRAZC/Benson et al. - 2014 - Spreadsheet driven web applications.pdf:application/pdf}
}

@inproceedings{chasins2018,
	location = {Berlin, Germany},
	title = {Rousillon: Scraping Distributed Hierarchical Web Data},
	isbn = {978-1-4503-5948-1},
	url = {http://dl.acm.org/citation.cfm?doid=3242587.3242661},
	doi = {10.1145/3242587.3242661},
	shorttitle = {Rousillon},
	abstract = {Programming by Demonstration ({PBD}) promises to enable data scientists to collect web data. However, in formative interviews with social scientists, we learned that current {PBD} tools are insufﬁcient for many real-world web scraping tasks. The missing piece is the capability to collect hierarchicallystructured data from across many different webpages. We present Rousillon, a programming system for writing complex web automation scripts by demonstration. Users demonstrate how to collect the ﬁrst row of a ‘universal table’ view of a hierarchical dataset to teach Rousillon how to collect all rows. To offer this new demonstration model, we developed novel relation selection and generalization algorithms. In a withinsubject user study on 15 computer scientists, users can write hierarchical web scrapers 8 times more quickly with Rousillon than with traditional programming.},
	eventtitle = {The 31st Annual {ACM} Symposium},
	pages = {963--975},
	booktitle = {The 31st Annual {ACM} Symposium on User Interface Software and Technology - {UIST} '18},
	publisher = {{ACM} Press},
	author = {Chasins, Sarah E. and Mueller, Maria and Bodik, Rastislav},
	urldate = {2020-01-03},
	date = {2018},
	langid = {english},
	file = {Chasins et al. - 2018 - Rousillon Scraping Distributed Hierarchical Web D.pdf:/Users/geoffreylitt/Zotero/storage/DJQ79QKU/Chasins et al. - 2018 - Rousillon Scraping Distributed Hierarchical Web D.pdf:application/pdf}
}

@book{nardi1993,
	title = {A Small Matter of Programming: Perspectives on End User Computing},
	shorttitle = {A Small Matter of Programming},
	abstract = {A Small Matter of Programming asks why it has been so difficult for end users to command programming power and explores the problems of end user-driven application development that must be solved to afford end users greater computational power. Drawing on empirical research on existing end user systems,  A Small Matter of Programming analyzes cognitive, social, and technical issues of end user programming. In particular, it examines the importance of task-specific programming languages, visual application frameworks, and collaborative work practices for end user computing, with the goal of helping designers and programmers understand and better satisfy the needs of end users who want the capability to create, customize, and extend their applications software. The ideas in the book are based on the author's research on two successful end user programming systems - spreadsheets and {CAD} systems - as well as other empirical research. Nardi concentrates on broad issues in end user programming, especially end users' strengths and problems, introducing tools and techniques as they are related to higher-level user issues. Bonnie A. Nardi is a Member of the Technical Staff at Hewlett Packard Laboratories.},
	pagetotal = {178},
	publisher = {The {MIT} Press},
	author = {Nardi, Bonnie A.},
	date = {1993-07-15}
}

@inproceedings{nardi1990,
	title = {An Ethnographic Study of Distributed Problem Solving in Spreadsheet Development},
	abstract = {In contrast to the common view of spreadsheets as “single-user ” programs, we have found that spreadsheets offer surprisingly strong support for cooperative development of a wide variety of applications. Ethnographic interviews with spreadsheet users showed that nearly all of the spreadsheets used in the work environments studied were the result of collaborative work by people with different levels of programming and domain expertise. Cooperation among spreadsheet users was spontaneous and casual; users activated existing informal social networks to initiate collaboration.},
	pages = {197--208},
	publisher = {{ACM} Press},
	author = {Nardi, Bonnie A. and Miller, James R.},
	date = {1990},
	file = {Citeseer - Snapshot:/Users/geoffreylitt/Zotero/storage/9ERKIFRJ/summary.html:text/html;Citeseer - Full Text PDF:/Users/geoffreylitt/Zotero/storage/B9EBINUV/Nardi and Miller - 1990 - An Ethnographic Study of Distributed Problem Solvi.pdf:application/pdf}
}

@inproceedings{bakke2016,
	location = {San Francisco, California, {USA}},
	title = {Expressive Query Construction through Direct Manipulation of Nested Relational Results},
	isbn = {978-1-4503-3531-7},
	url = {http://dl.acm.org/citation.cfm?doid=2882903.2915210},
	doi = {10.1145/2882903.2915210},
	abstract = {Despite extensive research on visual query systems, the standard way to interact with relational databases remains to be through {SQL} queries and tailored form interfaces. We consider three requirements to be essential to a successful alternative: (1) query speciﬁcation through direct manipulation of results, (2) the ability to view and modify any part of the current query without departing from the direct manipulation interface, and (3) {SQL}-like expressiveness. This paper presents the ﬁrst visual query system to meet all three requirements in a single design. By directly manipulating nested relational results, and using spreadsheet idioms such as formulas and ﬁlters, the user can express a relationally complete set of query operators plus calculation, aggregation, outer joins, sorting, and nesting, while always remaining able to track and modify the state of the complete query. Our prototype gives the user an experience of responsive, incremental query building while pushing all actual query processing to the database layer. We evaluate our system with formative and controlled user studies on 28 spreadsheet users; the controlled study shows our system signiﬁcantly outperforming Microsoft Access on the System Usability Scale.},
	eventtitle = {the 2016 International Conference},
	pages = {1377--1392},
	booktitle = {Proceedings of the 2016 International Conference on Management of Data - {SIGMOD} '16},
	publisher = {{ACM} Press},
	author = {Bakke, Eirik and Karger, David R.},
	urldate = {2020-01-04},
	date = {2016},
	langid = {english},
	file = {Bakke and Karger - 2016 - Expressive Query Construction through Direct Manip.pdf:/Users/geoffreylitt/Zotero/storage/UAXRC2LC/Bakke and Karger - 2016 - Expressive Query Construction through Direct Manip.pdf:application/pdf}
}

@article{engelbart2003,
	title = {Improving Our Ability to Improve: A Call for Investment in a New Future},
	abstract = {In the past fifty years we have seen enormous growth in computing capability – computing is everywhere and has impacted nearly everything. In this talk, Dr. Douglas Engelbart, who pioneered much of what we now take for granted as interactive computing, examines the forces that have shaped this growth. He argues that our criteria for investment in innovation are, in fact, short-sighted and focused on the wrong things. He proposes, instead, investment in an improvement infrastructure that can result in sustained, radical innovation capable of changing computing and expanding the kinds of problems that we can address through computing.},
	pages = {14},
	author = {Engelbart, Dr Douglas C and Dr, Kaiser},
	date = {2003},
	langid = {english},
	keywords = {toread},
	file = {Engelbart and Dr - 2003 - Improving Our Ability to Improve A Call for Inves.pdf:/Users/geoffreylitt/Zotero/storage/5MCRAG23/Engelbart and Dr - 2003 - Improving Our Ability to Improve A Call for Inves.pdf:application/pdf}
}

@article{nardi1991,
	title = {Twinkling lights and nested loops: distributed problem solving and spreadsheet development},
	volume = {34},
	issn = {00207373},
	url = {https://linkinghub.elsevier.com/retrieve/pii/002073739190040E},
	doi = {10.1016/0020-7373(91)90040-E},
	shorttitle = {Twinkling lights and nested loops},
	pages = {161--184},
	number = {2},
	journaltitle = {International Journal of Man-Machine Studies},
	shortjournal = {International Journal of Man-Machine Studies},
	author = {Nardi, Bonnie A. and Miller, James R.},
	urldate = {2020-01-05},
	date = {1991-02},
	langid = {english},
	file = {Nardi and Miller - 1991 - Twinkling lights and nested loops distributed pro.pdf:/Users/geoffreylitt/Zotero/storage/ZN8KPRHB/Nardi and Miller - 1991 - Twinkling lights and nested loops distributed pro.pdf:application/pdf}
}

@inproceedings{torlak2007,
	title = {Kodkod: A relational model finder},
	shorttitle = {Kodkod},
	pages = {632--647},
	booktitle = {International Conference on Tools and Algorithms for the Construction and Analysis of Systems},
	publisher = {Springer},
	author = {Torlak, Emina and Jackson, Daniel},
	date = {2007},
	file = {Full Text:/Users/geoffreylitt/Zotero/storage/JD7XJVQD/Torlak and Jackson - 2007 - Kodkod A relational model finder.pdf:application/pdf;Snapshot:/Users/geoffreylitt/Zotero/storage/GP83CYAX/978-3-540-71209-1_49.html:text/html}
}

@incollection{robinson1993,
	location = {Dordrecht},
	title = {Design for unanticipated use.....},
	isbn = {978-94-011-2094-4},
	url = {https://doi.org/10.1007/978-94-011-2094-4_13},
	abstract = {Support for work practice is better conceptualised as support for activity taking place in a multidimensional space than as prescription of temporal task sequences. The notion of “common artefact” is introduced to illustrate, unify, and summarise recent research that identifies significant dimensions of cooperative work. Common artefacts may be mundane, everyday objects like hotel keyracks or sophisticated computer tools. Both are multidimensional, in that they provide orthogonal features. They are predictable; help people see at a glance what others are doing (peripheral awareness); support implicit communications through the material being worked on; provide a focus for discussion of difficulties and negotiation of compromises (double level language); and afford an overview of the work process that would not otherwise be available. It is argued that {CSCW} should support these dimensions of work, rather than trying to anticipate its specific sequentiality.},
	pages = {187--202},
	booktitle = {Proceedings of the Third European Conference on Computer-Supported Cooperative Work 13–17 September 1993, Milan, Italy {ECSCW} ’93},
	publisher = {Springer Netherlands},
	author = {Robinson, Mike},
	editor = {de Michelis, Giorgio and Simone, Carla and Schmidt, Kjeld},
	urldate = {2020-01-07},
	date = {1993},
	langid = {english},
	doi = {10.1007/978-94-011-2094-4_13},
	keywords = {Common Artefact, Computer Support Cooperative Work, Cooperative Work, Explicit Communication, Flight Level},
	file = {Springer Full Text PDF:/Users/geoffreylitt/Zotero/storage/YI7YP66J/Robinson - 1993 - Design for unanticipated use......pdf:application/pdf}
}

@online{zotero-109,
	title = {Cracking the cocoa nut {\textbar} Proceedings of the 24th annual {ACM} symposium on User interface software and technology},
	url = {http://dl.acm.org/doi/abs/10.1145/2047196.2047226},
	urldate = {2020-01-07},
	langid = {english},
	file = {Snapshot:/Users/geoffreylitt/Zotero/storage/IU975ZTG/2047196.html:text/html}
}

@inproceedings{eagan2011,
	location = {Santa Barbara, California, {USA}},
	title = {Cracking the cocoa nut: user interface programming at runtime},
	isbn = {978-1-4503-0716-1},
	url = {http://dl.acm.org/citation.cfm?doid=2047196.2047226},
	doi = {10.1145/2047196.2047226},
	shorttitle = {Cracking the cocoa nut},
	abstract = {This article introduces runtime toolkit overloading, a novel approach to help third-party developers modify the interaction and behavior of existing software applications without access to their underlying source code. We describe the abstractions provided by this approach as well as the mechanisms for implementing them in existing environments. We describe Scotty, a prototype implementation for Mac {OS} X Cocoa that enables developers to modify existing applications at runtime, and we demonstrate a collection of interaction and functional transformations on existing off-the-shelf applications. We show how Scotty helps a developer make sense of unfamiliar software, even without access to its source code. We further discuss what features of future environments would facilitate this kind of runtime software development.},
	eventtitle = {the 24th annual {ACM} symposium},
	pages = {225},
	booktitle = {Proceedings of the 24th annual {ACM} symposium on User interface software and technology - {UIST} '11},
	publisher = {{ACM} Press},
	author = {Eagan, James R. and Beaudouin-Lafon, Michel and Mackay, Wendy E.},
	urldate = {2020-01-07},
	date = {2011},
	langid = {english},
	file = {Eagan et al. - 2011 - Cracking the cocoa nut user interface programming.pdf:/Users/geoffreylitt/Zotero/storage/EBX2GJRX/Eagan et al. - 2011 - Cracking the cocoa nut user interface programming.pdf:application/pdf}
}

@inproceedings{mackay1991,
	location = {New Orleans, Louisiana, United States},
	title = {Triggers and barriers to customizing software},
	isbn = {978-0-89791-383-6},
	url = {http://portal.acm.org/citation.cfm?doid=108844.108867},
	doi = {10.1145/108844.108867},
	abstract = {One of the properties of a user interface is that it both guides and constrains the patterns of interaction between the user and the software application. Application software is increasingly designed to be “customizable” by the end user, providing specific mechanisms by which users may specify individual preferences about the software and how they will interact with it over multiple sessions. Users may thus encode and preserve their preferred patterns of use. These customizations, together with choices about which applications to use, make up the unique “softswue environment” for each individual.},
	eventtitle = {the {SIGCHI} conference},
	pages = {153--160},
	booktitle = {Proceedings of the {SIGCHI} conference on Human factors in computing systems Reaching through technology - {CHI} '91},
	publisher = {{ACM} Press},
	author = {Mackay, Wendy E.},
	urldate = {2020-01-07},
	date = {1991},
	langid = {english},
	file = {Mackay - 1991 - Triggers and barriers to customizing software.pdf:/Users/geoffreylitt/Zotero/storage/CEKJFXHF/Mackay - 1991 - Triggers and barriers to customizing software.pdf:application/pdf}
}

@article{zotero-117,
	title = {A theory of the learnable},
	url = {http://dl.acm.org/doi/abs/10.1145/1968.1972},
	journaltitle = {Communications of the {ACM}},
	urldate = {2020-01-07},
	langid = {english},
	file = {Snapshot:/Users/geoffreylitt/Zotero/storage/BJEDTPMG/1968.html:text/html}
}

@article{valiant1984,
	title = {A theory of the learnable},
	volume = {27},
	abstract = {Humans appear to be able to learn new concepts without needing to be programmed explicitly in any conventional sense. In this paper we regard learning as the phenomenon of knowledge acquisition in the absence of explicit programming. We give a precise methodology for studying this phenomenon from a computational viewpoint. It consists of choosing an appropriate information gathering mechanism, the learning protocol, and exploring the class of concepts that can be learned using it in a reasonable (polynomial) number of steps. Although inherent algorithmic complexity appears to set serious limits to the range of concepts that can be learned, we show that there are some important nontrivial classes of propositional concepts that can be learned in a realistic sense.},
	pages = {9},
	number = {11},
	author = {Valiant, Leslie},
	date = {1984},
	langid = {english},
	keywords = {toread},
	file = {Waltz - 1984 - A theory of the learnable.pdf:/Users/geoffreylitt/Zotero/storage/5U9B4ZMA/Waltz - 1984 - A theory of the learnable.pdf:application/pdf}
}

@inproceedings{mccutchen2016,
	location = {Amsterdam, Netherlands},
	title = {Object spreadsheets: a new computational model for end-user development of data-centric web applications},
	isbn = {978-1-4503-4076-2},
	url = {http://dl.acm.org/citation.cfm?doid=2986012.2986018},
	doi = {10.1145/2986012.2986018},
	shorttitle = {Object spreadsheets},
	abstract = {Spreadsheets offer many advantages as the computational and data-storage engine for applications that are authored by end users. Paradoxically, however, their main failing in this regard is their computational model. Despite being used in almost all cases to represent data that is essentially relational (with some hierarchical structuring), the spreadsheet model treats the two-dimensional grid as largely unstructured, with formulas linking cells in an ad hoc way.},
	eventtitle = {the 2016 {ACM} International Symposium},
	pages = {112--127},
	booktitle = {Proceedings of the 2016 {ACM} International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software - Onward! 2016},
	publisher = {{ACM} Press},
	author = {{McCutchen}, Matt and Itzhaky, Shachar and Jackson, Daniel},
	urldate = {2020-01-07},
	date = {2016},
	langid = {english},
	file = {McCutchen et al. - 2016 - Object spreadsheets a new computational model for.pdf:/Users/geoffreylitt/Zotero/storage/8KXJ224J/McCutchen et al. - 2016 - Object spreadsheets a new computational model for.pdf:application/pdf}
}

@article{2003,
	title = {American Educational Research Association 2004 Annual Meeting: April 12–16, San Diego},
	volume = {32},
	issn = {0013-189X, 1935-102X},
	url = {http://journals.sagepub.com/doi/10.3102/0013189X032009035},
	doi = {10.3102/0013189X032009035},
	shorttitle = {American Educational Research Association 2004 Annual Meeting},
	pages = {35--43},
	number = {9},
	journaltitle = {Educational Researcher},
	shortjournal = {Educational Researcher},
	urldate = {2020-01-07},
	date = {2003-12},
	langid = {english},
	file = {2003 - American Educational Research Association 2004 Ann.pdf:/Users/geoffreylitt/Zotero/storage/JSMCHX9E/2003 - American Educational Research Association 2004 Ann.pdf:application/pdf}
}

@online{resnick2016,
	title = {Designing for Wide Walls},
	url = {https://design.blog/2016/08/25/mitchel-resnick-designing-for-wide-walls/},
	shorttitle = {Mitchel Resnick},
	abstract = {It’s not enough to provide a single path from low floor to high ceiling; we need to provide wide walls so that kids can explore multiple pathways from floor to ceiling.},
	titleaddon = {Design.blog},
	author = {Resnick, Mitchel},
	urldate = {2020-01-07},
	date = {2016-08-25},
	langid = {english},
	file = {Snapshot:/Users/geoffreylitt/Zotero/storage/CI562PI7/mitchel-resnick-designing-for-wide-walls.html:text/html}
}

@article{myers2000,
	title = {Past, Present, and Future of User Interface Software Tools},
	volume = {7},
	doi = {10.1145/344949.344959},
	abstract = {A user interface software tool helps developers design and implement the user interface. Research on past tools has had enormous impact on today's developers---virtually all applications today were built using some form of user interface tool. In this paper, we consider cases of both success and failure in past user interface tools. From these cases we extract a set of themes which can serve as lessons for future work. Using these themes, past tools can be characterized by what aspects of the user interface they addressed, their threshold and ceiling, what path of least resistance they offer, how predictable they are to use, and whether they addressed a target that became irrelevant. We believe the lessons of these past themes are particularly important now, because increasingly rapid technological changes are likely to significantly change user interfaces. We are at the dawn of an era where user interfaces are about to break out of the "desktop" box where they have been stuck for the ...},
	pages = {3--28},
	journaltitle = {{ACM} Trans. Comput.-Hum. Interact.},
	shortjournal = {{ACM} Trans. Comput.-Hum. Interact.},
	author = {Myers, Brad and Hudson, Scott and Pausch, Randy},
	date = {2000-03-01},
	file = {Full Text PDF:/Users/geoffreylitt/Zotero/storage/UL2WV4QQ/Myers et al. - 2000 - Past, Present, and Future of User Interface Softwa.pdf:application/pdf}
}

@inproceedings{scaffidi2005,
	location = {Dallas, {TX}, {USA}},
	title = {Estimating the Numbers of End Users and End User Programmers},
	isbn = {978-0-7695-2443-6},
	url = {http://ieeexplore.ieee.org/document/1509505/},
	doi = {10.1109/VLHCC.2005.34},
	abstract = {In 1995, Boehm predicted that by 2005, there would be “55 million performers” of “end user programming” in the United States. The original context and method which generated this number had two weaknesses, both of which we address. First, it relies on undocumented, judgment based factors to estimate the number of end user programmers based on the total number of end users; we address this weakness by identifying specific end user sub populations and then estimating their sizes. Second, Boehm's estimate relies on additional undocumented, judgment based factors to adjust for rising computer usage rates; we address this weakness by integrating fresh Bureau of Labor Statistics ({BLS}) data and projections as well as a richer estimation method.},
	eventtitle = {2005 {IEEE} Symposium on Visual Languages and Human-Centric Computing ({VL}/{HCC}'05)},
	pages = {207--214},
	booktitle = {2005 {IEEE} Symposium on Visual Languages and Human-Centric Computing ({VL}/{HCC}'05)},
	publisher = {{IEEE}},
	author = {Scaffidi, C. and Shaw, M. and Myers, B.},
	urldate = {2020-01-08},
	date = {2005},
	langid = {english},
	file = {Scaffidi et al. - 2005 - Estimating the Numbers of End Users and End User P.pdf:/Users/geoffreylitt/Zotero/storage/9HPVDWWQ/Scaffidi et al. - 2005 - Estimating the Numbers of End Users and End User P.pdf:application/pdf}
}

@article{chlipala2016,
	title = {The End of History? Using a Proof Assistant to Replace Language Design with Library Design},
	abstract = {Functionality of software systems has exploded in part because of advances in programminglanguage support for packaging reusable functionality as libraries. Developers beneﬁt from the uniformity that comes of exposing many interfaces in the same language, as opposed to stringing together hodgepodges of command-line tools. Domain-speciﬁc languages may be viewed as an evolution of the power of reusable interfaces, when those interfaces become so ﬂexible as to deserve to be called programming languages. However, common approaches to domain-speciﬁc languages give up many of the hard-won advantages of library-building in a rich common language, and even the traditional approach poses signiﬁcant challenges in learning new {APIs}. We suggest that instead of continuing to develop new domain-speciﬁc languages, our community should embrace library-based ecosystems within very expressive languages that mix programming and theorem proving. Our prototype framework Fiat, a library for the Coq proof assistant, turns languages into easily comprehensible libraries via the key idea of modularizing functionality and performance away from each other, the former via macros that desugar into higher-order logic and the latter via optimization scripts that derive eﬃcient code from logical programs.},
	pages = {14},
	author = {Chlipala, Adam and Delaware, Benjamin and Duchovni, Samuel and Pit-Claudel, Clément and Suriyakarn, Sorawit and Wang, Peng and Ye, Katherine},
	date = {2016},
	langid = {english},
	keywords = {toread},
	file = {Chlipala et al. - 2016 - The End of History Using a Proof Assistant to Rep.pdf:/Users/geoffreylitt/Zotero/storage/I3EUUHAE/Chlipala et al. - 2016 - The End of History Using a Proof Assistant to Rep.pdf:application/pdf}
}

@article{sarkar2018,
	title = {Calculation View: multiple-representation editing in spreadsheets},
	url = {https://www.microsoft.com/en-us/research/publication/calculation-view-multiple-representation-editing-in-spreadsheets/},
	shorttitle = {Calculation View},
	abstract = {Spreadsheet errors are ubiquitous and costly, an unfortunate combination that is well-reported. A large class of these errors can be attributed to the inability to clearly see the underlying computational structure, as well as poor support for abstraction (encapsulation, re-use, etc). In this paper we propose a novel solution: a multiple-representation spreadsheet containing additional representations …},
	author = {Sarkar, Advait and Gordon, Andy and Jones, Simon Peyton and Toronto, Neil},
	urldate = {2020-01-10},
	date = {2018-10-11},
	langid = {american},
	file = {Full Text PDF:/Users/geoffreylitt/Zotero/storage/H9QZBRSC/Sarkar et al. - 2018 - Calculation View multiple-representation editing .pdf:application/pdf;Snapshot:/Users/geoffreylitt/Zotero/storage/7EV4V9XU/calculation-view-multiple-representation-editing-in-spreadsheets.html:text/html}
}

@article{spencer2015,
	title = {Brittleness and Bureaucracy: Software as a Material for Science},
	volume = {23},
	issn = {1063-6145, 1530-9274},
	url = {http://www.mitpressjournals.org/doi/10.1162/POSC_a_00184},
	doi = {10.1162/POSC_a_00184},
	shorttitle = {Brittleness and Bureaucracy},
	pages = {466--484},
	number = {4},
	journaltitle = {Perspectives on Science},
	shortjournal = {Perspectives on Science},
	author = {Spencer, Matt},
	urldate = {2020-01-12},
	date = {2015-11},
	langid = {english},
	keywords = {toread},
	file = {Spencer - 2015 - Brittleness and Bureaucracy Software as a Materia.pdf:/Users/geoffreylitt/Zotero/storage/QYIANLYK/Spencer - 2015 - Brittleness and Bureaucracy Software as a Materia.pdf:application/pdf}
}