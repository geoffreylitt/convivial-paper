
@inproceedings{bolin2005,
  langid = {english},
  location = {{Seattle, WA, USA}},
  title = {Automation and Customization of Rendered Web Pages},
  isbn = {978-1-59593-271-6},
  url = {http://portal.acm.org/citation.cfm?doid=1095034.1095062},
  doi = {10.1145/1095034.1095062},
  abstract = {On the desktop, an application can expect to control its user interface down to the last pixel, but on the World Wide Web, a content provider has no control over how the client will view the page, once delivered to the browser. This creates an opportunity for end-users who want to automate and customize their web experiences, but the growing complexity of web pages and standards prevents most users from realizing this opportunity. We describe Chickenfoot, a programming system embedded in the Firefox web browser, which enables end-users to automate, customize, and integrate web applications without examining their source code. One way Chickenfoot addresses this goal is a novel technique for identifying page components by keyword pattern matching. We motivate this technique by studying how users name web page components, and present a heuristic keyword matching algorithm that identifies the desired component from the userâ€™s name.},
  eventtitle = {The 18th Annual {{ACM}} Symposium},
  booktitle = {Proceedings of the 18th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology  - {{UIST}} '05},
  publisher = {{ACM Press}},
  urldate = {2019-12-27},
  date = {2005},
  pages = {163},
  author = {Bolin, Michael and Webber, Matthew and Rha, Philip and Wilson, Tom and Miller, Robert C.},
  file = {/Users/geoffreylitt/Zotero/storage/JS89G2G2/Bolin et al. - 2005 - Automation and customization of rendered web pages.pdf}
}

@inproceedings{miller2010,
  title = {Rewriting the {{Web}} with {{Chickenfoot}}},
  doi = {10.1016/B978-0-12-381541-5.00003-1},
  abstract = {Publisher Summary Unlike desktop applications, Web applications are much more exposed and open to modification. This chapter describes Chickenfoot, a programming system embedded in the Firefox Web browser, which enables end users to automate, customize, and integrate Web applications without examining their source code. One way Chickenfoot addresses this goal is a technique for identifying page components by keyword pattern matching. Web automation includes navigating pages, filling in forms, and clicking on links. For example, many conferences now use a Web site to receive papers, distribute them to reviewers, and collect the reviews. A reviewer assigned 10 papers must download each paper, print it, and (later) upload a review for it. Tedious repetition is a good argument for automation. While integrating multiple Web sites, the simplest kind of integration is just adding links from one site to another, but much richer integration is possible. Techniques are developed through studying how users name Web page components and present a heuristic keyword-matching algorithm that identifies the desired component from the user's name. It describes a range of applications that have been created using Chickenfoot and reflects on its advantages and limitations.},
  date = {2010},
  keywords = {Desktop computer,HTML,HTTP,Human-readable medium,Internet,Rewriting,Sprout (computer),User Interface Device Component,Web application,World Wide Web,XML},
  author = {Miller, Robert C. and Bolin, Michael and Chilton, Lydia B. and Little, Greg and Webber, Matthew J. and Yu, Chen-Hsiang}
}


