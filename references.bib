
@article{2003,
  title = {American {{Educational Research Association}} 2004 {{Annual Meeting}}: {{April}} 12\textendash{}16, {{San Diego}}},
  shorttitle = {American {{Educational Research Association}} 2004 {{Annual Meeting}}},
  year = {2003},
  month = dec,
  volume = {32},
  pages = {35--43},
  issn = {0013-189X, 1935-102X},
  doi = {10.3102/0013189X032009035},
  file = {/Users/geoffreylitt/Zotero/storage/JSMCHX9E/2003 - American Educational Research Association 2004 Ann.pdf},
  journal = {Educational Researcher},
  language = {en},
  number = {9}
}

@misc{2019,
  title = {End-User Programming},
  year = {2019},
  month = mar,
  abstract = {A vision for empowered computing that reaches back forty years. Our research lab examines why it has been so hard to achieve.},
  file = {/Users/geoffreylitt/Zotero/storage/VN9ZZWVZ/end-user-programming.html},
  journal = {Ink and Switch},
  language = {en-US}
}

@inproceedings{bakke2016,
  title = {Expressive {{Query Construction}} through {{Direct Manipulation}} of {{Nested Relational Results}}},
  booktitle = {Proceedings of the 2016 {{International Conference}} on {{Management}} of {{Data}} - {{SIGMOD}} '16},
  author = {Bakke, Eirik and Karger, David R.},
  year = {2016},
  pages = {1377--1392},
  publisher = {{ACM Press}},
  address = {{San Francisco, California, USA}},
  doi = {10.1145/2882903.2915210},
  abstract = {Despite extensive research on visual query systems, the standard way to interact with relational databases remains to be through SQL queries and tailored form interfaces. We consider three requirements to be essential to a successful alternative: (1) query specification through direct manipulation of results, (2) the ability to view and modify any part of the current query without departing from the direct manipulation interface, and (3) SQL-like expressiveness. This paper presents the first visual query system to meet all three requirements in a single design. By directly manipulating nested relational results, and using spreadsheet idioms such as formulas and filters, the user can express a relationally complete set of query operators plus calculation, aggregation, outer joins, sorting, and nesting, while always remaining able to track and modify the state of the complete query. Our prototype gives the user an experience of responsive, incremental query building while pushing all actual query processing to the database layer. We evaluate our system with formative and controlled user studies on 28 spreadsheet users; the controlled study shows our system significantly outperforming Microsoft Access on the System Usability Scale.},
  file = {/Users/geoffreylitt/Zotero/storage/UAXRC2LC/Bakke and Karger - 2016 - Expressive Query Construction through Direct Manip.pdf},
  isbn = {978-1-4503-3531-7},
  language = {en}
}

@inproceedings{beaudouin-lafon2000,
  title = {Reification, {{Polymorphism}} and {{Reuse}}: {{Three Principles}} for {{Designing Visual Interfaces}}},
  shorttitle = {Reification, {{Polymorphism}} and {{Reuse}}},
  booktitle = {Proceedings of the {{Working Conference}} on {{Advanced Visual Interfaces}}},
  author = {{Beaudouin-Lafon}, Michel and Mackay, Wendy E.},
  year = {2000},
  pages = {102--109},
  publisher = {{ACM}},
  address = {{Palermo, Italy}},
  doi = {10.1145/345513.345267},
  abstract = {This paper presents three design principles to support the development of large-scale applications and take advantage of recent research in new interaction techniques: Reification turns concepts into first class objects, polymorphism permits commands to be applied to objects of different types, and reuse makes both user input and system output accessible for later use. We show that the power of these principles lies in their combination. Reification creates new objects that can be acted upon by a small set of polymorphic commands, creating more opportunities for reuse. The result is a simpler yet more powerful interface.
To validate these principles, we describe their application in the redesign of a complex interface for editing and simulating Coloured Petri Nets. The cpn2000 interface integrates floating palettes, toolglasses and marking menus in a consistent manner with a new metaphor for managing the workspace. It challenges traditional ideas about user interfaces, getting rid of pull-down menus, scrollbars, and even selection, while providing the same or greater functionality. Preliminary tests with users show that they find the new system both easier to use and more efficient.},
  file = {/Users/geoffreylitt/Zotero/storage/ZUTWDQ9X/Beaudouin-Lafon and Mackay - 2000 - Reification, Polymorphism and Reuse Three Princip.pdf},
  isbn = {978-1-58113-252-6},
  keywords = {design principles,direct manipulation,instrumental interaction,interaction model,polymorphism,reification,reuse},
  series = {{{AVI}} '00}
}

@inproceedings{benson2014,
  title = {Spreadsheet Driven Web Applications},
  booktitle = {Proceedings of the 27th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology - {{UIST}} '14},
  author = {Benson, Edward and Zhang, Amy X. and Karger, David R.},
  year = {2014},
  pages = {97--106},
  publisher = {{ACM Press}},
  address = {{Honolulu, Hawaii, USA}},
  doi = {10.1145/2642918.2647387},
  abstract = {Creating and publishing read-write-compute web applications requires programming skills beyond what most end users possess. But many end users know how to make spreadsheets that act as simple information management applications, often with computation. We present a system for creating basic web applications using such spreadsheets in place of a server and using HTML to describe the client UI. Authors connect the two by placing spreadsheet references inside HTML attributes. Data computation is provided by spreadsheet formulas. The result is a reactive read-write-compute web page without a single line of Javascript code. Nearly all of the fifteen HTML novices we studied were able to connect HTML to spreadsheets using our method with minimal instruction. We draw conclusions from their experience and discuss future extensions to this programming model.},
  file = {/Users/geoffreylitt/Zotero/storage/GGLIRAZC/Benson et al. - 2014 - Spreadsheet driven web applications.pdf},
  isbn = {978-1-4503-3069-5},
  language = {en}
}

@misc{berners-lee2018,
  title = {One {{Small Step}} for the {{Web}}\ldots{}},
  author = {{Berners-Lee}, Tim},
  year = {2018},
  month = sep,
  abstract = {I've always believed the web is for everyone. That's why I and others fight fiercely to protect it. The changes we've managed to bring have\ldots{}},
  file = {/Users/geoffreylitt/Zotero/storage/MSSQR3BL/one-small-step-for-the-web-87f92217d085.html},
  howpublished = {https://medium.com/@timberners\_lee/one-small-step-for-the-web-87f92217d085},
  journal = {Medium},
  language = {en}
}

@inproceedings{bolin2005,
  title = {Automation and Customization of Rendered Web Pages},
  booktitle = {Proceedings of the 18th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology  - {{UIST}} '05},
  author = {Bolin, Michael and Webber, Matthew and Rha, Philip and Wilson, Tom and Miller, Robert C.},
  year = {2005},
  pages = {163},
  publisher = {{ACM Press}},
  address = {{Seattle, WA, USA}},
  doi = {10.1145/1095034.1095062},
  abstract = {On the desktop, an application can expect to control its user interface down to the last pixel, but on the World Wide Web, a content provider has no control over how the client will view the page, once delivered to the browser. This creates an opportunity for end-users who want to automate and customize their web experiences, but the growing complexity of web pages and standards prevents most users from realizing this opportunity. We describe Chickenfoot, a programming system embedded in the Firefox web browser, which enables end-users to automate, customize, and integrate web applications without examining their source code. One way Chickenfoot addresses this goal is a novel technique for identifying page components by keyword pattern matching. We motivate this technique by studying how users name web page components, and present a heuristic keyword matching algorithm that identifies the desired component from the user's name.},
  file = {/Users/geoffreylitt/Zotero/storage/JS89G2G2/Bolin et al. - 2005 - Automation and customization of rendered web pages.pdf},
  isbn = {978-1-59593-271-6},
  keywords = {Wildcard},
  language = {en}
}

@inproceedings{chang2014,
  title = {Creating Interactive Web Data Applications with Spreadsheets},
  booktitle = {Proceedings of the 27th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology - {{UIST}} '14},
  author = {Chang, Kerry Shih-Ping and Myers, Brad A.},
  year = {2014},
  pages = {87--96},
  publisher = {{ACM Press}},
  address = {{Honolulu, Hawaii, USA}},
  doi = {10.1145/2642918.2647371},
  abstract = {While more and more data are available through web services, it remains difficult for end-users to create web applications that make use of these data without having to write complex code. We present Gneiss, a live programming environment that extends the spreadsheet metaphor to support creating interactive web applications that dynamically use local and web data from multiple sources. Gneiss closely integrates a spreadsheet editor with a web interface builder to let users demonstrate bindings between properties of web GUI elements and cells in the spreadsheet while working with real web service data. The spreadsheet editor provides two-way connections to web services, to both visualize and retrieve different data based on the user input in the web interface. Gneiss achieves rich interactivity without the need for event-based programming by extending the ``pull model'' of formulas that is familiar to the spreadsheet users. We use a series of examples to demonstrate Gneiss's ability to create a variety of interactive web data applications.},
  file = {/Users/geoffreylitt/Zotero/storage/VKRPDATE/Chang and Myers - 2014 - Creating interactive web data applications with sp.pdf},
  isbn = {978-1-4503-3069-5},
  language = {en}
}

@article{chang2019,
  title = {Dependent Type Systems as Macros},
  author = {Chang, Stephen and Ballantyne, Michael and Turner, Milo and Bowman, William J.},
  year = {2019},
  month = dec,
  volume = {4},
  pages = {1--29},
  issn = {24751421},
  doi = {10.1145/3371071},
  file = {/Users/geoffreylitt/Zotero/storage/DL7ZUBWU/Chang et al. - 2019 - Dependent type systems as macros.pdf},
  journal = {Proceedings of the ACM on Programming Languages},
  keywords = {toread},
  language = {en},
  number = {POPL}
}

@inproceedings{chasins2018,
  title = {Rousillon: {{Scraping Distributed Hierarchical Web Data}}},
  shorttitle = {Rousillon},
  booktitle = {The 31st {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}} - {{UIST}} '18},
  author = {Chasins, Sarah E. and Mueller, Maria and Bodik, Rastislav},
  year = {2018},
  pages = {963--975},
  publisher = {{ACM Press}},
  address = {{Berlin, Germany}},
  doi = {10.1145/3242587.3242661},
  abstract = {Programming by Demonstration (PBD) promises to enable data scientists to collect web data. However, in formative interviews with social scientists, we learned that current PBD tools are insufficient for many real-world web scraping tasks. The missing piece is the capability to collect hierarchicallystructured data from across many different webpages. We present Rousillon, a programming system for writing complex web automation scripts by demonstration. Users demonstrate how to collect the first row of a `universal table' view of a hierarchical dataset to teach Rousillon how to collect all rows. To offer this new demonstration model, we developed novel relation selection and generalization algorithms. In a withinsubject user study on 15 computer scientists, users can write hierarchical web scrapers 8 times more quickly with Rousillon than with traditional programming.},
  file = {/Users/geoffreylitt/Zotero/storage/DJQ79QKU/Chasins et al. - 2018 - Rousillon Scraping Distributed Hierarchical Web D.pdf},
  isbn = {978-1-4503-5948-1},
  language = {en}
}

@article{chlipala2016,
  title = {The {{End}} of {{History}}? {{Using}} a {{Proof Assistant}} to {{Replace Language Design}} with {{Library Design}}},
  author = {Chlipala, Adam and Delaware, Benjamin and Duchovni, Samuel and {Pit-Claudel}, Cl{\'e}ment and Suriyakarn, Sorawit and Wang, Peng and Ye, Katherine},
  year = {2016},
  pages = {14},
  abstract = {Functionality of software systems has exploded in part because of advances in programminglanguage support for packaging reusable functionality as libraries. Developers benefit from the uniformity that comes of exposing many interfaces in the same language, as opposed to stringing together hodgepodges of command-line tools. Domain-specific languages may be viewed as an evolution of the power of reusable interfaces, when those interfaces become so flexible as to deserve to be called programming languages. However, common approaches to domain-specific languages give up many of the hard-won advantages of library-building in a rich common language, and even the traditional approach poses significant challenges in learning new APIs. We suggest that instead of continuing to develop new domain-specific languages, our community should embrace library-based ecosystems within very expressive languages that mix programming and theorem proving. Our prototype framework Fiat, a library for the Coq proof assistant, turns languages into easily comprehensible libraries via the key idea of modularizing functionality and performance away from each other, the former via macros that desugar into higher-order logic and the latter via optimization scripts that derive efficient code from logical programs.},
  file = {/Users/geoffreylitt/Zotero/storage/I3EUUHAE/Chlipala et al. - 2016 - The End of History Using a Proof Assistant to Rep.pdf},
  keywords = {toread},
  language = {en}
}

@article{disessa1986,
  title = {Boxer: A Reconstructible Computational Medium},
  shorttitle = {Boxer},
  author = {{diSessa}, A. A and Abelson, H.},
  year = {1986},
  month = sep,
  volume = {29},
  pages = {859--868},
  issn = {00010782},
  doi = {10.1145/6592.6595},
  file = {/Users/geoffreylitt/Zotero/storage/EWBMP8Z2/diSessa and Abelson - 1986 - Boxer a reconstructible computational medium.pdf},
  journal = {Communications of the ACM},
  language = {en},
  number = {9}
}

@book{disessa2000,
  title = {Changing {{Minds}}: {{Computers}}, {{Learning}}, and {{Literacy}}},
  shorttitle = {Changing {{Minds}}},
  author = {{diSessa}, Andrea A.},
  year = {2000},
  publisher = {{MIT Press}},
  address = {{Cambridge, MA, USA}}
}

@inproceedings{eagan2011,
  title = {Cracking the Cocoa Nut: User Interface Programming at Runtime},
  shorttitle = {Cracking the Cocoa Nut},
  booktitle = {Proceedings of the 24th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology - {{UIST}} '11},
  author = {Eagan, James R. and {Beaudouin-Lafon}, Michel and Mackay, Wendy E.},
  year = {2011},
  pages = {225},
  publisher = {{ACM Press}},
  address = {{Santa Barbara, California, USA}},
  doi = {10.1145/2047196.2047226},
  abstract = {This article introduces runtime toolkit overloading, a novel approach to help third-party developers modify the interaction and behavior of existing software applications without access to their underlying source code. We describe the abstractions provided by this approach as well as the mechanisms for implementing them in existing environments. We describe Scotty, a prototype implementation for Mac OS X Cocoa that enables developers to modify existing applications at runtime, and we demonstrate a collection of interaction and functional transformations on existing off-the-shelf applications. We show how Scotty helps a developer make sense of unfamiliar software, even without access to its source code. We further discuss what features of future environments would facilitate this kind of runtime software development.},
  file = {/Users/geoffreylitt/Zotero/storage/EBX2GJRX/Eagan et al. - 2011 - Cracking the cocoa nut user interface programming.pdf},
  isbn = {978-1-4503-0716-1},
  language = {en}
}

@article{engelbart2003,
  title = {Improving {{Our Ability}} to {{Improve}}: {{A Call}} for {{Investment}} in a {{New Future}}},
  author = {Engelbart, Dr Douglas C and Dr, Kaiser},
  year = {2003},
  pages = {14},
  abstract = {In the past fifty years we have seen enormous growth in computing capability \textendash{} computing is everywhere and has impacted nearly everything. In this talk, Dr. Douglas Engelbart, who pioneered much of what we now take for granted as interactive computing, examines the forces that have shaped this growth. He argues that our criteria for investment in innovation are, in fact, short-sighted and focused on the wrong things. He proposes, instead, investment in an improvement infrastructure that can result in sustained, radical innovation capable of changing computing and expanding the kinds of problems that we can address through computing.},
  file = {/Users/geoffreylitt/Zotero/storage/5MCRAG23/Engelbart and Dr - 2003 - Improving Our Ability to Improve A Call for Inves.pdf},
  keywords = {toread},
  language = {en}
}

@inproceedings{hogue2005,
  title = {Thresher: Automating the Unwrapping of Semantic Content from the {{World Wide Web}}},
  shorttitle = {Thresher},
  booktitle = {Proceedings of the 14th International Conference on {{World Wide Web}}  - {{WWW}} '05},
  author = {Hogue, Andrew and Karger, David},
  year = {2005},
  pages = {86},
  publisher = {{ACM Press}},
  address = {{Chiba, Japan}},
  doi = {10.1145/1060745.1060762},
  abstract = {We describe Thresher, a system that lets non-technical users teach their browsers how to extract semantic web content from HTML documents on the World Wide Web. Users specify examples of semantic content by highlighting them in a web browser and describing their meaning. We then use the tree edit distance between the DOM subtrees of these examples to create a general pattern, or wrapper, for the content, and allow the user to bind RDF classes and predicates to the nodes of these wrappers. By overlaying matches to these patterns on standard documents inside the Haystack semantic web browser, we enable a rich semantic interaction with existing web pages, ``unwrapping'' semantic data buried in the pages' HTML. By allowing end-users to create, modify, and utilize their own patterns, we hope to speed adoption and use of the Semantic Web and its applications.},
  file = {/Users/geoffreylitt/Zotero/storage/SGZ4PK28/Hogue and Karger - 2005 - Thresher automating the unwrapping of semantic co.pdf},
  isbn = {978-1-59593-046-0},
  language = {en}
}

@article{huynh,
  title = {Potluck: {{Data Mash}}-{{Up Tool}} for {{Casual Users}}},
  author = {Huynh, David F and Miller, Robert C and Karger, David R},
  pages = {14},
  abstract = {As more and more reusable structured data appears on the Web, casual users will want to take into their own hands the task of mashing up data rather than wait for mash-up sites to be built that address exactly their individually unique needs. In this paper, we present Potluck, a Web user interface that lets casual users\-\textemdash{}those without programming skills and data modeling expertise\textemdash{}mash up data themselves.},
  file = {/Users/geoffreylitt/Zotero/storage/8NYBXRL6/Huynh et al. - Potluck Data Mash-Up Tool for Casual Users.pdf},
  language = {en}
}

@inproceedings{huynh2005,
  title = {Piggy {{Bank}}: {{Experience}} the {{Semantic Web Inside Your Web Browser}}},
  shorttitle = {Piggy {{Bank}}},
  booktitle = {The {{Semantic Web}} \textendash{} {{ISWC}} 2005},
  author = {Huynh, David and Mazzocchi, Stefano and Karger, David},
  editor = {Gil, Yolanda and Motta, Enrico and Benjamins, V. Richard and Musen, Mark A.},
  year = {2005},
  pages = {413--430},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11574620_31},
  abstract = {The Semantic Web Initiative envisions a Web wherein information is offered free of presentation, allowing more effective exchange and mixing across web sites and across web pages. But without substantial Semantic Web content, few tools will be written to consume it; without many such tools, there is little appeal to publish Semantic Web content.To break this chicken-and-egg problem, thus enabling more flexible informa-tion access, we have created a web browser extension called Piggy Bankthat lets users make use of Semantic Web content within Web content as users browse the Web. Wherever Semantic Web content is not available, Piggy Bank can invoke screenscrapers to re-structure information within web pages into Semantic Web format. Through the use of Semantic Web technologies, Piggy Bank provides direct, immediate benefits to users in their use of the existing Web. Thus, the ex-istence of even just a few Semantic Web-enabled sites or a few scrapers already benefits users. Piggy Bank thereby offers an easy, incremental upgrade path to users without requiring a wholesale adoption of the Semantic Web's vision.To further improve this Semantic Web experience, we have created Semantic Bank, a web server application that lets Piggy Bank users share the Semantic Web information they have collected, enabling collaborative efforts to build so-phisticated Semantic Web information repositories through simple, everyday's use of Piggy Bank.},
  file = {/Users/geoffreylitt/Zotero/storage/T84CAZ7L/Huynh et al. - 2005 - Piggy Bank Experience the Semantic Web Inside You.pdf},
  isbn = {978-3-540-32082-1},
  keywords = {Common Data Model,Information Item,Resource Description Framework,Resource Description Framework Data,Temporary Database},
  language = {en},
  series = {Lecture {{Notes}} in {{Computer Science}}}
}

@inproceedings{huynh2006,
  title = {Enabling Web Browsers to Augment Web Sites' Filtering and Sorting Functionalities},
  booktitle = {Proceedings of the 19th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology - {{UIST}} '06},
  author = {Huynh, David F. and Miller, Robert C. and Karger, David R.},
  year = {2006},
  pages = {125},
  publisher = {{ACM Press}},
  address = {{Montreux, Switzerland}},
  doi = {10.1145/1166253.1166274},
  abstract = {Existing augmentations of web pages are mostly small cosmetic changes (e.g., removing ads) and minor addition of third-party content (e.g., product prices from competing sites). None leverages the structured data presented in web pages. This paper describes Sifter, a web browser extension that can augment a well-structured web site with advanced filtering and sorting functionality. These added features work inside the site's own pages, preserving the site's presentational style and the user's context. Sifter contains an algorithm that scrapes structured data out of well-structured web pages while usually requiring no user intervention. We tested Sifter on real web sites and real users and found that people could use Sifter to perform sophisticated queries and high-level analyses on sizable data collections on the Web. We propose that web sites can be similarly augmented with other sophisticated data-centric functionality, giving users new benefits over the existing Web.},
  file = {/Users/geoffreylitt/Zotero/storage/8WA9RXE3/Huynh et al. - 2006 - Enabling web browsers to augment web sites' filter.pdf},
  isbn = {978-1-59593-313-3},
  language = {en}
}

@inproceedings{huynh2007,
  title = {Exhibit: Lightweight Structured Data Publishing},
  shorttitle = {Exhibit},
  booktitle = {Proceedings of the 16th International Conference on {{World Wide Web}}  - {{WWW}} '07},
  author = {Huynh, David F. and Karger, David R. and Miller, Robert C.},
  year = {2007},
  pages = {737},
  publisher = {{ACM Press}},
  address = {{Banff, Alberta, Canada}},
  doi = {10.1145/1242572.1242672},
  abstract = {The early Web was hailed for giving individuals the same publishing power as large content providers. But over time, large content providers learned to exploit the structure in their data, leveraging databases and server side technologies to provide rich browsing and visualization. Individual authors fall behind once more: neither old-fashioned static pages nor domain-specific publishing frameworks supporting limited customization can match custom database-backed web applications.},
  file = {/Users/geoffreylitt/Zotero/storage/KDFB58RI/Huynh et al. - 2007 - Exhibit lightweight structured data publishing.pdf},
  isbn = {978-1-59593-654-7},
  language = {en}
}

@article{huynha,
  title = {Piggy {{Bank}}: {{Experience}} the {{Semantic Web Inside Your Web Browser}}},
  author = {Huynh, David and Mazzocchi, Stefano and Karger, David},
  pages = {15},
  abstract = {The Semantic Web Initiative envisions a Web wherein information is offered free of presentation, allowing more effective exchange and mixing across web sites and across web pages. But without substantial Semantic Web content, few tools will be written to consume it; without many such tools, there is little appeal to publish Semantic Web content.},
  file = {/Users/geoffreylitt/Zotero/storage/KN75YT2E/Huynh et al. - Piggy Bank Experience the Semantic Web Inside You.pdf},
  language = {en}
}

@article{hypercard2019,
  title = {{{HyperCard}}},
  author = {Hypercard},
  year = {2019},
  month = dec,
  abstract = {HyperCard is a software application and  development kit for Apple Macintosh and Apple IIGS computers. It is among the first successful hypermedia systems predating the World Wide Web.
HyperCard combines a flat-file database with a graphical, flexible, user-modifiable interface. HyperCard includes a built-in programming language called HyperTalk for manipulating data and the user interface.
This combination of features \textendash{} a database with simple form layout, flexible support for graphics, and ease of programming \textendash{} suits HyperCard for many different projects such as rapid application development of applications and databases, interactive applications with no database requirements, command and control systems, and many examples in the demoscene.
HyperCard was originally released in 1987 for \$49.95 and was included for free with all new Macs sold then. It was withdrawn from sale in March 2004, having received its final update in 1998 upon the return of Steve Jobs to Apple. HyperCard runs in the Classic Environment, but was not ported to Mac OS X.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  file = {/Users/geoffreylitt/Zotero/storage/XZV548R8/index.html},
  journal = {Wikipedia},
  language = {en},
  note = {Page Version ID: 931376685}
}

@article{kay1977,
  title = {Personal {{Dynamic Media}}},
  author = {Kay, A. and Goldberg, A.},
  year = {1977},
  month = mar,
  volume = {10},
  pages = {31--41},
  issn = {1558-0814},
  doi = {10.1109/C-M.1977.217672},
  abstract = {The Learning Research Group at Xerox Palo Alto Research Center is concerned with all aspects of the communication and manipulation of knowledge. We design, build, and use dynamic media which can be used by human beings of all ages. Several years ago, we crystallized our dreams into a design idea for a personal dynamic medium the size of a notebook (the Dynabook) which could be owned by everyone and could have the power to handle virtually all of its owner's information-related needs. Towards this goal we have designed and built a communications system: the Smalltalk language, implemented on small computers we refer to as "interim Dynabooks." We are exploring the use of this system as a programming and problem solving tool; as an interactive memory for the storage and manipulation of data; as a text editor; and as a medium for expression through drawing, painting, animating pictures, and composing and generating music. (Figure 1 is a view of this interim Dynabook.)},
  file = {/Users/geoffreylitt/Zotero/storage/Q3SGCHYI/Kay and Goldberg - 1977 - Personal Dynamic Media.pdf;/Users/geoffreylitt/Zotero/storage/8Q36BUGB/1646405.html},
  journal = {Computer},
  keywords = {Animation,Computational modeling,Crystallization,Embedded computing,Information retrieval,Manipulator dynamics,Problem-solving},
  number = {3}
}

@inproceedings{klokmose2015,
  title = {Webstrates: {{Shareable Dynamic Media}}},
  shorttitle = {Webstrates},
  booktitle = {Proceedings of the 28th {{Annual ACM Symposium}} on {{User Interface Software}} \& {{Technology}} - {{UIST}} '15},
  author = {Klokmose, Clemens N. and Eagan, James R. and Baader, Siemen and Mackay, Wendy and {Beaudouin-Lafon}, Michel},
  year = {2015},
  pages = {280--290},
  publisher = {{ACM Press}},
  address = {{Daegu, Kyungpook, Republic of Korea}},
  doi = {10.1145/2807442.2807446},
  abstract = {We revisit Alan Kay's early vision of dynamic media that blurs the distinction between documents and applications. We introduce shareable dynamic media that are malleable by users, who may appropriate them in idiosyncratic ways; shareable among users, who collaborate on multiple aspects of the media; and distributable across diverse devices and platforms. We present Webstrates, an environment for exploring shareable dynamic media. Webstrates augment web technology with real-time sharing. They turn web pages into substrates, i.e. software entities that act as applications or documents depending upon use. We illustrate Webstrates with two implemented case studies: users collaboratively author an article with functionally and visually different editors that they can personalize and extend at run-time; and they orchestrate its presentation and audience participation with multiple devices. We demonstrate the simplicity and generative power of Webstrates with three additional prototypes and evaluate it from a systems perspective.},
  file = {/Users/geoffreylitt/Zotero/storage/PZI6XAMQ/Klokmose et al. - 2015 - iWebstratesi Shareable Dynamic Media.pdf},
  isbn = {978-1-4503-3779-3},
  language = {en}
}

@inproceedings{leshed2008,
  title = {{{CoScripter}}: {{Automating}} \& {{Sharing How}}-to {{Knowledge}} in the {{Enterprise}}},
  shorttitle = {{{CoScripter}}},
  booktitle = {Proceedings of the {{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Leshed, Gilly and Haber, Eben M. and Matthews, Tara and Lau, Tessa},
  year = {2008},
  pages = {1719--1728},
  publisher = {{ACM}},
  address = {{Florence, Italy}},
  doi = {10.1145/1357054.1357323},
  abstract = {Modern enterprises are replete with numerous online processes. Many must be performed frequently and are tedious, while others are done less frequently yet are complex or hard to remember. We present interviews with knowledge workers that reveal a need for mechanisms to automate the execution of and to share knowledge about these processes. In response, we have developed the CoScripter system (formerly Koala [11]), a collaborative scripting environment for recording, automating, and sharing web-based processes. We have deployed CoScripter within a large corporation for more than 10 months. Through usage log analysis and interviews with users, we show that CoScripter has addressed many user automation and sharing needs, to the extent that more than 50 employees have voluntarily incorporated it into their work practice. We also present ways people have used CoScripter and general issues for tools that support automation and sharing of how-to knowledge.},
  file = {/Users/geoffreylitt/Zotero/storage/RHE55DIG/Leshed et al. - 2008 - CoScripter Automating & Sharing How-to Knowledge .pdf},
  isbn = {978-1-60558-011-1},
  keywords = {automation,knowledge sharing,procedural knowledge,programming-by-demonstration,scripting,user study,wiki},
  series = {{{CHI}} '08}
}

@article{lew2019,
  title = {Trace Types and Denotational Semantics for Sound Programmable Inference in Probabilistic Languages},
  author = {Lew, Alexander K. and {Cusumano-Towner}, Marco F. and Sherman, Benjamin and Carbin, Michael and Mansinghka, Vikash K.},
  year = {2019},
  month = dec,
  volume = {4},
  pages = {1--32},
  issn = {24751421},
  doi = {10.1145/3371087},
  abstract = {ALEXANDER K. LEW, Massachusetts Institute of Technology, USA MARCO F. CUSUMANO-TOWNER, Massachusetts Institute of Technology, USA BENJAMIN SHERMAN, Massachusetts Institute of Technology, USA MICHAEL CARBIN, Massachusetts Institute of Technology, USA VIKASH K. MANSINGHKA, Massachusetts Institute of Technology, USA Modern probabilistic programming languages aim to formalize and automate key aspects of probabilistic modeling and inference. Many languages provide constructs for programmable inference that enable developers 19 to improve inference speed and accuracy by tailoring an algorithm for use with a particular model or dataset. Unfortunately, it is easy to use these constructs to write unsound programs that appear to run correctly but produce incorrect results. To address this problem, we present a denotational semantics for programmable inference in higher-order probabilistic programming languages, along with a type system that ensures that well-typed inference programs are sound by construction. A central insight is that the type of a probabilistic expression can track the space of its possible execution traces, not just the type of value that it returns, as these traces are often the objects that inference algorithms manipulate. We use our semantics and type system to establish soundness properties of custom inference programs that use constructs for variational, sequential Monte Carlo, importance sampling, and Markov chain Monte Carlo inference. CCS Concepts: {$\cdot$} Mathematics of computing \textrightarrow{} Probabilistic inference problems; Variational methods; Metropolis-Hastings algorithm; Sequential Monte Carlo methods; {$\cdot$} Theory of computation \textrightarrow{} Semantics and reasoning; Denotational semantics; {$\cdot$} Software and its engineering \textrightarrow{} Formal language definitions.},
  file = {/Users/geoffreylitt/Zotero/storage/RTHTYZ7Y/Lew et al. - 2019 - Trace types and denotational semantics for sound p.pdf},
  journal = {Proceedings of the ACM on Programming Languages},
  keywords = {toread},
  language = {en},
  number = {POPL}
}

@incollection{little2010,
  title = {Sloppy Programming},
  booktitle = {No {{Code Required}}},
  author = {Little, Greg and Miller, Robert C. and Chou, Victoria H. and Bernstein, Michael and Lau, Tessa and Cypher, Allen},
  year = {2010},
  pages = {289--307},
  publisher = {{Elsevier}},
  doi = {10.1016/B978-0-12-381541-5.00015-8},
  abstract = {Modern applications provide interfaces for scripting, but many users do not know how to write script commands. However, many users are familiar with the idea of entering keywords into a Web search engine. Hence, if a user is familiar with the vocabulary of an application domain, we anticipate that they could write a set of keywords expressing a command in that domain. For instance, in the Web browsing domain, a user might enter ``click search button''. We call loosely grammatical commands of this sort ``sloppy commands.'' We discuss several prototypes that implement sloppy programming, translating sloppy commands directly into executable code. We also discuss the algorithms used in these prototypes, expose their limitations, and propose directions for future work.},
  file = {/Users/geoffreylitt/Zotero/storage/GBFFTC6G/Little et al. - 2010 - Sloppy programming.pdf},
  isbn = {978-0-12-381541-5},
  language = {en}
}

@inproceedings{mackay1991,
  title = {Triggers and Barriers to Customizing Software},
  booktitle = {Proceedings of the {{SIGCHI}} Conference on {{Human}} Factors in Computing Systems {{Reaching}} through Technology - {{CHI}} '91},
  author = {Mackay, Wendy E.},
  year = {1991},
  pages = {153--160},
  publisher = {{ACM Press}},
  address = {{New Orleans, Louisiana, United States}},
  doi = {10.1145/108844.108867},
  abstract = {One of the properties of a user interface is that it both guides and constrains the patterns of interaction between the user and the software application. Application software is increasingly designed to be ``customizable'' by the end user, providing specific mechanisms by which users may specify individual preferences about the software and how they will interact with it over multiple sessions. Users may thus encode and preserve their preferred patterns of use. These customizations, together with choices about which applications to use, make up the unique ``softswue environment'' for each individual.},
  file = {/Users/geoffreylitt/Zotero/storage/CEKJFXHF/Mackay - 1991 - Triggers and barriers to customizing software.pdf},
  isbn = {978-0-89791-383-6},
  language = {en}
}

@inproceedings{mayer2015,
  title = {User {{Interaction Models}} for {{Disambiguation}} in {{Programming}} by {{Example}}},
  booktitle = {Proceedings of the 28th {{Annual ACM Symposium}} on {{User Interface Software}} \& {{Technology}} - {{UIST}} '15},
  author = {Mayer, Mika{\"e}l and Soares, Gustavo and Grechkin, Maxim and Le, Vu and Marron, Mark and Polozov, Oleksandr and Singh, Rishabh and Zorn, Benjamin and Gulwani, Sumit},
  year = {2015},
  pages = {291--301},
  publisher = {{ACM Press}},
  address = {{Daegu, Kyungpook, Republic of Korea}},
  doi = {10.1145/2807442.2807459},
  abstract = {Programming by Examples (PBE) has the potential to revo\- lutionize end-user programming by enabling end users, most of whom are non-programmers, to create small scripts for au\- tomating repetitive tasks. However, examples, though often easy to provide, are an ambiguous specification of the user's intent. Because of that, a key impedance in adoption of PBE systems is the lack of user confidence in the correctness of the program that was synthesized by the system. We present two novel user interaction models that communicate action\- able information to the user to help resolve ambiguity in the examples. One of these models allows the user to effectively navigate between the huge set of programs that are consis\- tent with the examples provided by the user. The other model uses active learning to ask directed example-based questions to the user on the test input data over which the user intends to run the synthesized program. Our user studies show that each of these models significantly reduces the number of errors in the performed task without any difference in completion time. Moreover, both models are perceived as useful, and the proactive active-learning based model has a slightly higher preference regarding the users' confidence in the result.},
  file = {/Users/geoffreylitt/Zotero/storage/GWGSLACW/Mayer et al. - 2015 - User Interaction Models for Disambiguation in Prog.pdf},
  isbn = {978-1-4503-3779-3},
  language = {en}
}

@inproceedings{mccutchen2016,
  title = {Object Spreadsheets: A New Computational Model for End-User Development of Data-Centric Web Applications},
  shorttitle = {Object Spreadsheets},
  booktitle = {Proceedings of the 2016 {{ACM International Symposium}} on {{New Ideas}}, {{New Paradigms}}, and {{Reflections}} on {{Programming}} and {{Software}} - {{Onward}}! 2016},
  author = {McCutchen, Matt and Itzhaky, Shachar and Jackson, Daniel},
  year = {2016},
  pages = {112--127},
  publisher = {{ACM Press}},
  address = {{Amsterdam, Netherlands}},
  doi = {10.1145/2986012.2986018},
  abstract = {Spreadsheets offer many advantages as the computational and data-storage engine for applications that are authored by end users. Paradoxically, however, their main failing in this regard is their computational model. Despite being used in almost all cases to represent data that is essentially relational (with some hierarchical structuring), the spreadsheet model treats the two-dimensional grid as largely unstructured, with formulas linking cells in an ad hoc way.},
  file = {/Users/geoffreylitt/Zotero/storage/8KXJ224J/McCutchen et al. - 2016 - Object spreadsheets a new computational model for.pdf},
  isbn = {978-1-4503-4076-2},
  language = {en}
}

@incollection{miller2010a,
  title = {Chapter 3 - {{Rewriting}} the {{Web}} with {{Chickenfoot}}},
  booktitle = {No {{Code Required}}},
  author = {Miller, Robert C. and Bolin, Michael and Chilton, Lydia B. and Little, Greg and Webber, Matthew and Yu, Chen-Hsiang},
  editor = {Cypher, Allen and Dontcheva, Mira and Lau, Tessa and Nichols, Jeffrey},
  year = {2010},
  month = jan,
  pages = {39--63},
  publisher = {{Morgan Kaufmann}},
  address = {{Boston}},
  doi = {10.1016/B978-0-12-381541-5.00003-1},
  abstract = {Unlike desktop applications, Web applications are much more exposed and open to modification. This chapter describes Chickenfoot, a programming system embedded in the Firefox Web browser, which enables end users to automate, customize, and integrate Web applications without examining their source code. One way Chickenfoot addresses this goal is a technique for identifying page components by keyword pattern matching. Web automation includes navigating pages, filling in forms, and clicking on links. For example, many conferences now use a Web site to receive papers, distribute them to reviewers, and collect the reviews. A reviewer assigned 10 papers must download each paper, print it, and (later) upload a review for it. Tedious repetition is a good argument for automation. While integrating multiple Web sites, the simplest kind of integration is just adding links from one site to another, but much richer integration is possible. Techniques are developed through studying how users name Web page components and present a heuristic keyword-matching algorithm that identifies the desired component from the user's name. It describes a range of applications that have been created using Chickenfoot and reflects on its advantages and limitations.},
  file = {/Users/geoffreylitt/Zotero/storage/ZZS3B7D7/Miller et al. - 2010 - Chapter 3 - Rewriting the Web with Chickenfoot.pdf;/Users/geoffreylitt/Zotero/storage/I95VQQIL/B9780123815415000031.html},
  isbn = {978-0-12-381541-5},
  language = {en}
}

@article{myers2000,
  title = {Past, {{Present}}, and {{Future}} of {{User Interface Software Tools}}},
  author = {Myers, Brad and Hudson, Scott and Pausch, Randy},
  year = {2000},
  month = mar,
  volume = {7},
  pages = {3--28},
  doi = {10.1145/344949.344959},
  abstract = {A user interface software tool helps developers design and implement the user interface. Research on past tools has had enormous impact on today's developers---virtually all applications today were built using some form of user interface tool. In this paper, we consider cases of both success and failure in past user interface tools. From these cases we extract a set of themes which can serve as lessons for future work. Using these themes, past tools can be characterized by what aspects of the user interface they addressed, their threshold and ceiling, what path of least resistance they offer, how predictable they are to use, and whether they addressed a target that became irrelevant. We believe the lessons of these past themes are particularly important now, because increasingly rapid technological changes are likely to significantly change user interfaces. We are at the dawn of an era where user interfaces are about to break out of the "desktop" box where they have been stuck for the ...},
  file = {/Users/geoffreylitt/Zotero/storage/UL2WV4QQ/Myers et al. - 2000 - Past, Present, and Future of User Interface Softwa.pdf},
  journal = {ACM Trans. Comput.-Hum. Interact.}
}

@inproceedings{nardi1990,
  title = {An {{Ethnographic Study}} of {{Distributed Problem Solving}} in {{Spreadsheet Development}}},
  author = {Nardi, Bonnie A. and Miller, James R.},
  year = {1990},
  pages = {197--208},
  publisher = {{ACM Press}},
  abstract = {In contrast to the common view of spreadsheets as ``single-user '' programs, we have found that spreadsheets offer surprisingly strong support for cooperative development of a wide variety of applications. Ethnographic interviews with spreadsheet users showed that nearly all of the spreadsheets used in the work environments studied were the result of collaborative work by people with different levels of programming and domain expertise. Cooperation among spreadsheet users was spontaneous and casual; users activated existing informal social networks to initiate collaboration.},
  file = {/Users/geoffreylitt/Zotero/storage/B9EBINUV/Nardi and Miller - 1990 - An Ethnographic Study of Distributed Problem Solvi.pdf;/Users/geoffreylitt/Zotero/storage/9ERKIFRJ/summary.html}
}

@article{nardi1991,
  title = {Twinkling Lights and Nested Loops: Distributed Problem Solving and Spreadsheet Development},
  shorttitle = {Twinkling Lights and Nested Loops},
  author = {Nardi, Bonnie A. and Miller, James R.},
  year = {1991},
  month = feb,
  volume = {34},
  pages = {161--184},
  issn = {00207373},
  doi = {10.1016/0020-7373(91)90040-E},
  file = {/Users/geoffreylitt/Zotero/storage/ZN8KPRHB/Nardi and Miller - 1991 - Twinkling lights and nested loops distributed pro.pdf},
  journal = {International Journal of Man-Machine Studies},
  language = {en},
  number = {2}
}

@book{nardi1993,
  title = {A {{Small Matter}} of {{Programming}}: {{Perspectives}} on {{End User Computing}}},
  shorttitle = {A {{Small Matter}} of {{Programming}}},
  author = {Nardi, Bonnie A.},
  year = {1993},
  month = jul,
  publisher = {{The MIT Press}},
  abstract = {A Small Matter of Programming asks why it has been so difficult for end users to command programming power and explores the problems of end user-driven application development that must be solved to afford end users greater computational power. Drawing on empirical research on existing end user systems,  A Small Matter of Programming analyzes cognitive, social, and technical issues of end user programming. In particular, it examines the importance of task-specific programming languages, visual application frameworks, and collaborative work practices for end user computing, with the goal of helping designers and programmers understand and better satisfy the needs of end users who want the capability to create, customize, and extend their applications software. The ideas in the book are based on the author's research on two successful end user programming systems - spreadsheets and CAD systems - as well as other empirical research. Nardi concentrates on broad issues in end user programming, especially end users' strengths and problems, introducing tools and techniques as they are related to higher-level user issues. Bonnie A. Nardi is a Member of the Technical Staff at Hewlett Packard Laboratories.},
  language = {English}
}

@article{ohearn2019,
  title = {Incorrectness Logic},
  author = {O'Hearn, Peter W.},
  year = {2019},
  month = dec,
  volume = {4},
  pages = {1--32},
  issn = {24751421},
  doi = {10.1145/3371078},
  abstract = {PETER W. O'HEARN, Facebook and University College London, UK 10 Program correctness and incorrectness are two sides of the same coin. As a programmer, even if you would like to have correctness, you might find yourself spending most of your time reasoning about incorrectness. This includes informal reasoning that people do while looking at or thinking about their code, as well as that supported by automated testing and static analysis tools. This paper describes a simple logic for program incorrectness which is, in a sense, the other side of the coin to Hoare's logic of correctness. CCS Concepts: {$\cdot$} Theory of computation \textrightarrow{} Programming logic.},
  file = {/Users/geoffreylitt/Zotero/storage/TDY592AI/O'Hearn - 2019 - Incorrectness logic.pdf},
  journal = {Proceedings of the ACM on Programming Languages},
  keywords = {toread},
  language = {en},
  number = {POPL}
}

@misc{resnick2016,
  title = {Designing for {{Wide Walls}}},
  shorttitle = {Mitchel {{Resnick}}},
  author = {Resnick, Mitchel},
  year = {2016},
  month = aug,
  abstract = {It's not enough to provide a single path from low floor to high ceiling; we need to provide wide walls so that kids can explore multiple pathways from floor to ceiling.},
  file = {/Users/geoffreylitt/Zotero/storage/CI562PI7/mitchel-resnick-designing-for-wide-walls.html},
  journal = {Design.blog},
  language = {en}
}

@incollection{robinson1993,
  title = {Design for Unanticipated Use.....},
  booktitle = {Proceedings of the {{Third European Conference}} on {{Computer}}-{{Supported Cooperative Work}} 13\textendash{}17 {{September}} 1993, {{Milan}}, {{Italy ECSCW}} '93},
  author = {Robinson, Mike},
  editor = {{de Michelis}, Giorgio and Simone, Carla and Schmidt, Kjeld},
  year = {1993},
  pages = {187--202},
  publisher = {{Springer Netherlands}},
  address = {{Dordrecht}},
  doi = {10.1007/978-94-011-2094-4_13},
  abstract = {Support for work practice is better conceptualised as support for activity taking place in a multidimensional space than as prescription of temporal task sequences. The notion of ``common artefact'' is introduced to illustrate, unify, and summarise recent research that identifies significant dimensions of cooperative work. Common artefacts may be mundane, everyday objects like hotel keyracks or sophisticated computer tools. Both are multidimensional, in that they provide orthogonal features. They are predictable; help people see at a glance what others are doing (peripheral awareness); support implicit communications through the material being worked on; provide a focus for discussion of difficulties and negotiation of compromises (double level language); and afford an overview of the work process that would not otherwise be available. It is argued that CSCW should support these dimensions of work, rather than trying to anticipate its specific sequentiality.},
  file = {/Users/geoffreylitt/Zotero/storage/YI7YP66J/Robinson - 1993 - Design for unanticipated use......pdf},
  isbn = {978-94-011-2094-4},
  keywords = {Common Artefact,Computer Support Cooperative Work,Cooperative Work,Explicit Communication,Flight Level},
  language = {en}
}

@article{sarkar2018,
  title = {Calculation {{View}}: Multiple-Representation Editing in Spreadsheets},
  shorttitle = {Calculation {{View}}},
  author = {Sarkar, Advait and Gordon, Andy and Jones, Simon Peyton and Toronto, Neil},
  year = {2018},
  month = oct,
  abstract = {Spreadsheet errors are ubiquitous and costly, an unfortunate combination that is well-reported. A large class of these errors can be attributed to the inability to clearly see the underlying computational structure, as well as poor support for abstraction (encapsulation, re-use, etc). In this paper we propose a novel solution: a multiple-representation spreadsheet containing additional representations \ldots{}},
  file = {/Users/geoffreylitt/Zotero/storage/H9QZBRSC/Sarkar et al. - 2018 - Calculation View multiple-representation editing .pdf;/Users/geoffreylitt/Zotero/storage/7EV4V9XU/calculation-view-multiple-representation-editing-in-spreadsheets.html},
  language = {en-US}
}

@inproceedings{scaffidi2005,
  title = {Estimating the {{Numbers}} of {{End Users}} and {{End User Programmers}}},
  booktitle = {2005 {{IEEE Symposium}} on {{Visual Languages}} and {{Human}}-{{Centric Computing}} ({{VL}}/{{HCC}}'05)},
  author = {Scaffidi, C. and Shaw, M. and Myers, B.},
  year = {2005},
  pages = {207--214},
  publisher = {{IEEE}},
  address = {{Dallas, TX, USA}},
  doi = {10.1109/VLHCC.2005.34},
  abstract = {In 1995, Boehm predicted that by 2005, there would be ``55 million performers'' of ``end user programming'' in the United States. The original context and method which generated this number had two weaknesses, both of which we address. First, it relies on undocumented, judgment based factors to estimate the number of end user programmers based on the total number of end users; we address this weakness by identifying specific end user sub populations and then estimating their sizes. Second, Boehm's estimate relies on additional undocumented, judgment based factors to adjust for rising computer usage rates; we address this weakness by integrating fresh Bureau of Labor Statistics (BLS) data and projections as well as a richer estimation method.},
  file = {/Users/geoffreylitt/Zotero/storage/9HPVDWWQ/Scaffidi et al. - 2005 - Estimating the Numbers of End Users and End User P.pdf},
  isbn = {978-0-7695-2443-6},
  language = {en}
}

@article{spencer2015,
  title = {Brittleness and {{Bureaucracy}}: {{Software}} as a {{Material}} for {{Science}}},
  shorttitle = {Brittleness and {{Bureaucracy}}},
  author = {Spencer, Matt},
  year = {2015},
  month = nov,
  volume = {23},
  pages = {466--484},
  issn = {1063-6145, 1530-9274},
  doi = {10.1162/POSC_a_00184},
  file = {/Users/geoffreylitt/Zotero/storage/QYIANLYK/Spencer - 2015 - Brittleness and Bureaucracy Software as a Materia.pdf},
  journal = {Perspectives on Science},
  keywords = {toread},
  language = {en},
  number = {4}
}

@misc{streak,
  title = {{{InboxSDK}}},
  author = {Streak},
  file = {/Users/geoffreylitt/Zotero/storage/TK2FCLM5/www.inboxsdk.com.html},
  howpublished = {https://www.inboxsdk.com/}
}

@misc{talwar2019,
  title = {Gmail.Js},
  author = {Talwar, Kartik},
  year = {2019},
  abstract = {Gmail JavaScript API},
  file = {/Users/geoffreylitt/Zotero/storage/EQIGCWJM/master.html},
  howpublished = {https://github.com/KartikTalwar/gmail.js},
  journal = {GitHub},
  language = {en}
}

@inproceedings{torlak2007,
  title = {Kodkod: {{A}} Relational Model Finder},
  shorttitle = {Kodkod},
  booktitle = {International {{Conference}} on {{Tools}} and {{Algorithms}} for the {{Construction}} and {{Analysis}} of {{Systems}}},
  author = {Torlak, Emina and Jackson, Daniel},
  year = {2007},
  pages = {632--647},
  publisher = {{Springer}},
  file = {/Users/geoffreylitt/Zotero/storage/JD7XJVQD/Torlak and Jackson - 2007 - Kodkod A relational model finder.pdf;/Users/geoffreylitt/Zotero/storage/GP83CYAX/978-3-540-71209-1_49.html}
}

@article{valiant1984,
  title = {A Theory of the Learnable},
  author = {Valiant, Leslie},
  year = {1984},
  volume = {27},
  pages = {9},
  abstract = {Humans appear to be able to learn new concepts without needing to be programmed explicitly in any conventional sense. In this paper we regard learning as the phenomenon of knowledge acquisition in the absence of explicit programming. We give a precise methodology for studying this phenomenon from a computational viewpoint. It consists of choosing an appropriate information gathering mechanism, the learning protocol, and exploring the class of concepts that can be learned using it in a reasonable (polynomial) number of steps. Although inherent algorithmic complexity appears to set serious limits to the range of concepts that can be learned, we show that there are some important nontrivial classes of propositional concepts that can be learned in a realistic sense.},
  file = {/Users/geoffreylitt/Zotero/storage/5U9B4ZMA/Waltz - 1984 - A theory of the learnable.pdf},
  keywords = {toread},
  language = {en},
  number = {11}
}

@inproceedings{verou2016,
  title = {Mavo: {{Creating Interactive Data}}-{{Driven Web Applications}} by {{Authoring HTML}}},
  shorttitle = {Mavo},
  booktitle = {Proceedings of the 29th {{Annual Symposium}} on {{User Interface Software}} and {{Technology}} - {{UIST}} '16},
  author = {Verou, Lea and Zhang, Amy X. and Karger, David R.},
  year = {2016},
  pages = {483--496},
  publisher = {{ACM Press}},
  address = {{Tokyo, Japan}},
  doi = {10.1145/2984511.2984551},
  abstract = {Many people can author static web pages with HTML and CSS but find it hard or impossible to program persistent, interactive web applications. We show that for a broad class of CRUD (Create, Read, Update, Delete) applications, this gap can be bridged. Mavo extends the declarative syntax of HTML to describe Web applications that manage, store and transform data. Using Mavo, authors with basic HTML knowledge define complex data schemas implicitly as they design their HTML layout. They need only add a few attributes and expressions to their HTML elements to transform their static design into a persistent, data-driven web application whose data can be edited by direct manipulation of the content in the browser. We evaluated Mavo with 20 users who marked up static designs\textemdash{}some provided by us, some their own creation\textemdash{}to transform them into fully functional web applications. Even users with no programming experience were able to quickly craft Mavo applications.},
  file = {/Users/geoffreylitt/Zotero/storage/WDIPZUY3/Verou et al. - 2016 - Mavo Creating Interactive Data-Driven Web Applica.pdf},
  isbn = {978-1-4503-4189-9},
  language = {en}
}

@misc{victor,
  title = {Dynamicland},
  author = {Victor, Bret},
  abstract = {incubating a humane dynamic medium},
  file = {/Users/geoffreylitt/Zotero/storage/JIP78YH7/dynamicland.org.html},
  howpublished = {https://dynamicland.org/}
}

@article{wang2019,
  title = {Visualization by Example},
  author = {Wang, Chenglong and Feng, Yu and Bodik, Rastislav and Cheung, Alvin and Dillig, Isil},
  year = {2019},
  month = dec,
  volume = {4},
  pages = {1--28},
  issn = {24751421},
  doi = {10.1145/3371117},
  abstract = {CHENGLONG WANG, University of Washington, USA YU FENG, University of California, Santa Barbara, USA RASTISLAV BODIK, University of Washington, USA ALVIN CHEUNG, University of California, Berkeley, USA ISIL DILLIG, University of Texas at Austin, USA While visualizations play a crucial role in gaining insights from data, generating useful visualizations from a complex dataset is far from an easy task. In particular, besides understanding the functionality provided by existing visualization libraries, generating the desired visualization also requires reshaping and aggregating the underlying data as well as composing different visual elements to achieve the intended visual narrative. This paper aims to simplify visualization tasks by automatically synthesizing the required program from simple visual sketches provided by the user. Specifically, given an input data set and a visual sketch that demonstrates how to visualize a very small subset of this data, our technique automatically generates a program that can be used to visualize the entire data set. From a program synthesis perspective, automating visualization tasks poses several challenges that are not addressed by prior techniques. First, because many visualization tasks require data wrangling in addition to generating plots from a given table, we need to decompose the end-to-end synthesis task into two separate sub-problems. Second, because the intermediate specification that results from the decomposition is necessarily imprecise, this makes the data wrangling task particularly challenging in our context. In this paper, we address these problems by developing a new compositional visualization-by-example technique that (a) decomposes the end-to-end task into two different synthesis problems over different DSLs and (b) leverages bi-directional program analysis to deal with the complexity that arises from having an imprecise intermediate specification. We have implemented our visualization-by-example approach in a tool called Viser and evaluate it on 83 visualization tasks collected from on-line forums and tutorials. Viser can solve 84\% of these benchmarks within a 600 second time limit, and, for those tasks that can be solved, the desired visualization is among the top-5 generated by Viser in 70\% of the cases. CCS Concepts: \textbullet{} Theory of computation \textrightarrow{} Program reasoning; \textbullet{} Human-centered computing \textrightarrow{} Visualization toolkits.},
  file = {/Users/geoffreylitt/Zotero/storage/2RWUSYKS/Wang et al. - 2019 - Visualization by example.pdf},
  journal = {Proceedings of the ACM on Programming Languages},
  keywords = {toread},
  language = {en},
  number = {POPL}
}

@inproceedings{wong2007,
  title = {Making Mashups with Marmite: Towards End-User Programming for the Web},
  shorttitle = {Making Mashups with Marmite},
  booktitle = {Proceedings of the {{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}  - {{CHI}} '07},
  author = {Wong, Jeffrey and Hong, Jason I.},
  year = {2007},
  pages = {1435--1444},
  publisher = {{ACM Press}},
  address = {{San Jose, California, USA}},
  doi = {10.1145/1240624.1240842},
  abstract = {There is a tremendous amount of web content available today, but it is not always in a form that supports end-users' needs. In many cases, all of the data and services needed to accomplish a goal already exist, but are not in a form amenable to an end-user. To address this problem, we have developed an end-user programming tool called Marmite, which lets end-users create so-called mashups that repurpose and combine existing web content and services. In this paper, we present the design, implementation, and evaluation of Marmite. An informal user study found that programmers and some spreadsheet users had little difficulty using the system.},
  file = {/Users/geoffreylitt/Zotero/storage/9QWLY8KD/Wong and Hong - 2007 - Making mashups with marmite towards end-user prog.pdf},
  isbn = {978-1-59593-593-9},
  language = {en}
}

@misc{zotero-109,
  title = {Cracking the Cocoa Nut | {{Proceedings}} of the 24th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology},
  file = {/Users/geoffreylitt/Zotero/storage/IU975ZTG/2047196.html},
  howpublished = {http://dl.acm.org/doi/abs/10.1145/2047196.2047226},
  language = {en}
}

@article{zotero-117,
  title = {A Theory of the Learnable},
  file = {/Users/geoffreylitt/Zotero/storage/BJEDTPMG/1968.html},
  journal = {Communications of the ACM},
  language = {en}
}

@misc{zotero-48,
  title = {Exhibit | {{Proceedings}} of the 16th International Conference on {{World Wide Web}}},
  file = {/Users/geoffreylitt/Zotero/storage/6KKT6UT4/1242572.html},
  howpublished = {http://dl.acm.org/doi/abs/10.1145/1242572.1242672},
  language = {en}
}

@misc{zotero-79,
  title = {Airtable: {{Organize}} Anything You Can Imagine},
  shorttitle = {Airtable},
  abstract = {Airtable works like a spreadsheet but gives you the power of a database to organize anything. Sign up for free.},
  file = {/Users/geoffreylitt/Zotero/storage/8UKHXPNG/airtable.com.html},
  howpublished = {https://airtable.com},
  journal = {Airtable}
}

@misc{zotero-81,
  title = {Create an {{App}} from a {{Google Sheet}} in {{Minutes}} {$\cdot$} {{Glide}}},
  abstract = {Glide turns spreadsheets into beautiful, easy-to-use apps, without code. Pick a spreadsheet or start with a template, customize your app, then share it instantly with anyone. Start today for free!},
  file = {/Users/geoffreylitt/Zotero/storage/YRRWLQM8/www.glideapps.com.html},
  howpublished = {https://www.glideapps.com/},
  language = {en}
}


